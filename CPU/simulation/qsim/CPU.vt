// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/22/2020 12:53:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	CLOCK,
	RESET,
	sampler_tx
);
input  CLOCK;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	ALU_1_IN,
	ALU_2_IN,
	ALU_INSTANT_OUT,
	ALU_OPCODE,
	do_update,
	eq,
	inst_cache_en,
	instr,
	is_shamt_load,
	overflow,
	pc,
	ReadDataOne,
	ReadDataTwo,
	reg_write,
	sgn,
	write_date,
	zero,
	sampler_rx
);
input [31:0] ALU_1_IN;
input [31:0] ALU_2_IN;
input [31:0] ALU_INSTANT_OUT;
input [3:0] ALU_OPCODE;
input  do_update;
input  eq;
input  inst_cache_en;
input [19:0] instr;
input  is_shamt_load;
input  overflow;
input [31:0] pc;
input [31:0] ReadDataOne;
input [31:0] ReadDataTwo;
input  reg_write;
input  sgn;
input [31:0] write_date;
input  zero;
input sampler_rx;

reg [31:0] ALU_1_IN_expected;
reg [31:0] ALU_2_IN_expected;
reg [31:0] ALU_INSTANT_OUT_expected;
reg [3:0] ALU_OPCODE_expected;
reg  do_update_expected;
reg  eq_expected;
reg  inst_cache_en_expected;
reg [19:0] instr_expected;
reg  is_shamt_load_expected;
reg  overflow_expected;
reg [31:0] pc_expected;
reg [31:0] ReadDataOne_expected;
reg [31:0] ReadDataTwo_expected;
reg  reg_write_expected;
reg  sgn_expected;
reg [31:0] write_date_expected;
reg  zero_expected;

reg [31:0] ALU_1_IN_prev;
reg [31:0] ALU_2_IN_prev;
reg [31:0] ALU_INSTANT_OUT_prev;
reg [3:0] ALU_OPCODE_prev;
reg  do_update_prev;
reg  eq_prev;
reg  inst_cache_en_prev;
reg [19:0] instr_prev;
reg  is_shamt_load_prev;
reg  overflow_prev;
reg [31:0] pc_prev;
reg [31:0] ReadDataOne_prev;
reg [31:0] ReadDataTwo_prev;
reg  reg_write_prev;
reg  sgn_prev;
reg [31:0] write_date_prev;
reg  zero_prev;

reg [31:0] ALU_1_IN_expected_prev;
reg [31:0] ALU_2_IN_expected_prev;
reg [31:0] ALU_INSTANT_OUT_expected_prev;
reg [3:0] ALU_OPCODE_expected_prev;
reg  do_update_expected_prev;
reg  eq_expected_prev;
reg  inst_cache_en_expected_prev;
reg [19:0] instr_expected_prev;
reg  is_shamt_load_expected_prev;
reg  overflow_expected_prev;
reg [31:0] pc_expected_prev;
reg [31:0] ReadDataOne_expected_prev;
reg [31:0] ReadDataTwo_expected_prev;
reg  reg_write_expected_prev;
reg  sgn_expected_prev;
reg [31:0] write_date_expected_prev;
reg  zero_expected_prev;

reg [31:0] last_ALU_1_IN_exp;
reg [31:0] last_ALU_2_IN_exp;
reg [31:0] last_ALU_INSTANT_OUT_exp;
reg [3:0] last_ALU_OPCODE_exp;
reg  last_do_update_exp;
reg  last_eq_exp;
reg  last_inst_cache_en_exp;
reg [19:0] last_instr_exp;
reg  last_is_shamt_load_exp;
reg  last_overflow_exp;
reg [31:0] last_pc_exp;
reg [31:0] last_ReadDataOne_exp;
reg [31:0] last_ReadDataTwo_exp;
reg  last_reg_write_exp;
reg  last_sgn_exp;
reg [31:0] last_write_date_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_1_IN_prev = ALU_1_IN;
	ALU_2_IN_prev = ALU_2_IN;
	ALU_INSTANT_OUT_prev = ALU_INSTANT_OUT;
	ALU_OPCODE_prev = ALU_OPCODE;
	do_update_prev = do_update;
	eq_prev = eq;
	inst_cache_en_prev = inst_cache_en;
	instr_prev = instr;
	is_shamt_load_prev = is_shamt_load;
	overflow_prev = overflow;
	pc_prev = pc;
	ReadDataOne_prev = ReadDataOne;
	ReadDataTwo_prev = ReadDataTwo;
	reg_write_prev = reg_write;
	sgn_prev = sgn;
	write_date_prev = write_date;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_1_IN_expected_prev = ALU_1_IN_expected;
	ALU_2_IN_expected_prev = ALU_2_IN_expected;
	ALU_INSTANT_OUT_expected_prev = ALU_INSTANT_OUT_expected;
	ALU_OPCODE_expected_prev = ALU_OPCODE_expected;
	do_update_expected_prev = do_update_expected;
	eq_expected_prev = eq_expected;
	inst_cache_en_expected_prev = inst_cache_en_expected;
	instr_expected_prev = instr_expected;
	is_shamt_load_expected_prev = is_shamt_load_expected;
	overflow_expected_prev = overflow_expected;
	pc_expected_prev = pc_expected;
	ReadDataOne_expected_prev = ReadDataOne_expected;
	ReadDataTwo_expected_prev = ReadDataTwo_expected;
	reg_write_expected_prev = reg_write_expected;
	sgn_expected_prev = sgn_expected;
	write_date_expected_prev = write_date_expected;
	zero_expected_prev = zero_expected;
end



// expected eq
initial
begin
	eq_expected = 1'bX;
	eq_expected = #999000 1'b0;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
	zero_expected = #999000 1'b0;
end 

// expected sgn
initial
begin
	sgn_expected = 1'bX;
	sgn_expected = #999000 1'b0;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
	overflow_expected = #999000 1'b0;
end 
// expected pc[ 31 ]
initial
begin
	pc_expected[31] = 1'bX;
	pc_expected[31] = #999000 1'b0;
end 
// expected pc[ 30 ]
initial
begin
	pc_expected[30] = 1'bX;
	pc_expected[30] = #999000 1'b0;
end 
// expected pc[ 29 ]
initial
begin
	pc_expected[29] = 1'bX;
	pc_expected[29] = #999000 1'b0;
end 
// expected pc[ 28 ]
initial
begin
	pc_expected[28] = 1'bX;
	pc_expected[28] = #999000 1'b0;
end 
// expected pc[ 27 ]
initial
begin
	pc_expected[27] = 1'bX;
	pc_expected[27] = #999000 1'b0;
end 
// expected pc[ 26 ]
initial
begin
	pc_expected[26] = 1'bX;
	pc_expected[26] = #999000 1'b0;
end 
// expected pc[ 25 ]
initial
begin
	pc_expected[25] = 1'bX;
	pc_expected[25] = #999000 1'b0;
end 
// expected pc[ 24 ]
initial
begin
	pc_expected[24] = 1'bX;
	pc_expected[24] = #999000 1'b0;
end 
// expected pc[ 23 ]
initial
begin
	pc_expected[23] = 1'bX;
	pc_expected[23] = #999000 1'b0;
end 
// expected pc[ 22 ]
initial
begin
	pc_expected[22] = 1'bX;
	pc_expected[22] = #999000 1'b0;
end 
// expected pc[ 21 ]
initial
begin
	pc_expected[21] = 1'bX;
	pc_expected[21] = #999000 1'b0;
end 
// expected pc[ 20 ]
initial
begin
	pc_expected[20] = 1'bX;
	pc_expected[20] = #999000 1'b0;
end 
// expected pc[ 19 ]
initial
begin
	pc_expected[19] = 1'bX;
	pc_expected[19] = #999000 1'b0;
end 
// expected pc[ 18 ]
initial
begin
	pc_expected[18] = 1'bX;
	pc_expected[18] = #999000 1'b0;
end 
// expected pc[ 17 ]
initial
begin
	pc_expected[17] = 1'bX;
	pc_expected[17] = #999000 1'b0;
end 
// expected pc[ 16 ]
initial
begin
	pc_expected[16] = 1'bX;
	pc_expected[16] = #999000 1'b0;
end 
// expected pc[ 15 ]
initial
begin
	pc_expected[15] = 1'bX;
	pc_expected[15] = #999000 1'b0;
end 
// expected pc[ 14 ]
initial
begin
	pc_expected[14] = 1'bX;
	pc_expected[14] = #999000 1'b0;
end 
// expected pc[ 13 ]
initial
begin
	pc_expected[13] = 1'bX;
	pc_expected[13] = #999000 1'b0;
end 
// expected pc[ 12 ]
initial
begin
	pc_expected[12] = 1'bX;
	pc_expected[12] = #999000 1'b0;
end 
// expected pc[ 11 ]
initial
begin
	pc_expected[11] = 1'bX;
	pc_expected[11] = #999000 1'b0;
end 
// expected pc[ 10 ]
initial
begin
	pc_expected[10] = 1'bX;
	pc_expected[10] = #999000 1'b0;
end 
// expected pc[ 9 ]
initial
begin
	pc_expected[9] = 1'bX;
	pc_expected[9] = #999000 1'b0;
end 
// expected pc[ 8 ]
initial
begin
	pc_expected[8] = 1'bX;
	pc_expected[8] = #999000 1'b0;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
	pc_expected[7] = #999000 1'b0;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
	pc_expected[6] = #999000 1'b0;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
	pc_expected[5] = #999000 1'b0;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
	pc_expected[4] = #999000 1'b0;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
	pc_expected[3] = #999000 1'b0;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
	pc_expected[2] = #999000 1'b0;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
	pc_expected[1] = #999000 1'b0;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
	pc_expected[0] = #999000 1'b0;
end 
// expected instr[ 19 ]
initial
begin
	instr_expected[19] = 1'bX;
	instr_expected[19] = #999000 1'b0;
end 
// expected instr[ 18 ]
initial
begin
	instr_expected[18] = 1'bX;
	instr_expected[18] = #999000 1'b0;
end 
// expected instr[ 17 ]
initial
begin
	instr_expected[17] = 1'bX;
	instr_expected[17] = #999000 1'b0;
end 
// expected instr[ 16 ]
initial
begin
	instr_expected[16] = 1'bX;
	instr_expected[16] = #999000 1'b0;
end 
// expected instr[ 15 ]
initial
begin
	instr_expected[15] = 1'bX;
	instr_expected[15] = #999000 1'b0;
end 
// expected instr[ 14 ]
initial
begin
	instr_expected[14] = 1'bX;
	instr_expected[14] = #999000 1'b0;
end 
// expected instr[ 13 ]
initial
begin
	instr_expected[13] = 1'bX;
	instr_expected[13] = #999000 1'b0;
end 
// expected instr[ 12 ]
initial
begin
	instr_expected[12] = 1'bX;
	instr_expected[12] = #999000 1'b0;
end 
// expected instr[ 11 ]
initial
begin
	instr_expected[11] = 1'bX;
	instr_expected[11] = #999000 1'b0;
end 
// expected instr[ 10 ]
initial
begin
	instr_expected[10] = 1'bX;
	instr_expected[10] = #999000 1'b0;
end 
// expected instr[ 9 ]
initial
begin
	instr_expected[9] = 1'bX;
	instr_expected[9] = #999000 1'b0;
end 
// expected instr[ 8 ]
initial
begin
	instr_expected[8] = 1'bX;
	instr_expected[8] = #999000 1'b0;
end 
// expected instr[ 7 ]
initial
begin
	instr_expected[7] = 1'bX;
	instr_expected[7] = #999000 1'b0;
end 
// expected instr[ 6 ]
initial
begin
	instr_expected[6] = 1'bX;
	instr_expected[6] = #999000 1'b0;
end 
// expected instr[ 5 ]
initial
begin
	instr_expected[5] = 1'bX;
	instr_expected[5] = #999000 1'b0;
end 
// expected instr[ 4 ]
initial
begin
	instr_expected[4] = 1'bX;
	instr_expected[4] = #999000 1'b0;
end 
// expected instr[ 3 ]
initial
begin
	instr_expected[3] = 1'bX;
	instr_expected[3] = #999000 1'b0;
end 
// expected instr[ 2 ]
initial
begin
	instr_expected[2] = 1'bX;
	instr_expected[2] = #999000 1'b0;
end 
// expected instr[ 1 ]
initial
begin
	instr_expected[1] = 1'bX;
	instr_expected[1] = #999000 1'b0;
end 
// expected instr[ 0 ]
initial
begin
	instr_expected[0] = 1'bX;
	instr_expected[0] = #999000 1'b0;
end 

// expected write_date[31]
initial
begin
	write_date_expected[31] = 1'bX;
	write_date_expected[31] = #999000 1'b0;
end 

// expected write_date[30]
initial
begin
	write_date_expected[30] = 1'bX;
	write_date_expected[30] = #999000 1'b0;
end 

// expected write_date[29]
initial
begin
	write_date_expected[29] = 1'bX;
	write_date_expected[29] = #999000 1'b0;
end 

// expected write_date[28]
initial
begin
	write_date_expected[28] = 1'bX;
	write_date_expected[28] = #999000 1'b0;
end 

// expected write_date[27]
initial
begin
	write_date_expected[27] = 1'bX;
	write_date_expected[27] = #999000 1'b0;
end 

// expected write_date[26]
initial
begin
	write_date_expected[26] = 1'bX;
	write_date_expected[26] = #999000 1'b0;
end 

// expected write_date[25]
initial
begin
	write_date_expected[25] = 1'bX;
	write_date_expected[25] = #999000 1'b0;
end 

// expected write_date[24]
initial
begin
	write_date_expected[24] = 1'bX;
	write_date_expected[24] = #999000 1'b0;
end 

// expected write_date[23]
initial
begin
	write_date_expected[23] = 1'bX;
	write_date_expected[23] = #999000 1'b0;
end 

// expected write_date[22]
initial
begin
	write_date_expected[22] = 1'bX;
	write_date_expected[22] = #999000 1'b0;
end 

// expected write_date[21]
initial
begin
	write_date_expected[21] = 1'bX;
	write_date_expected[21] = #999000 1'b0;
end 

// expected write_date[20]
initial
begin
	write_date_expected[20] = 1'bX;
	write_date_expected[20] = #999000 1'b0;
end 

// expected write_date[19]
initial
begin
	write_date_expected[19] = 1'bX;
	write_date_expected[19] = #999000 1'b0;
end 

// expected write_date[18]
initial
begin
	write_date_expected[18] = 1'bX;
	write_date_expected[18] = #999000 1'b0;
end 

// expected write_date[17]
initial
begin
	write_date_expected[17] = 1'bX;
	write_date_expected[17] = #999000 1'b0;
end 

// expected write_date[16]
initial
begin
	write_date_expected[16] = 1'bX;
	write_date_expected[16] = #999000 1'b0;
end 

// expected write_date[15]
initial
begin
	write_date_expected[15] = 1'bX;
	write_date_expected[15] = #999000 1'b0;
end 

// expected write_date[14]
initial
begin
	write_date_expected[14] = 1'bX;
	write_date_expected[14] = #999000 1'b0;
end 

// expected write_date[13]
initial
begin
	write_date_expected[13] = 1'bX;
	write_date_expected[13] = #999000 1'b0;
end 

// expected write_date[12]
initial
begin
	write_date_expected[12] = 1'bX;
	write_date_expected[12] = #999000 1'b0;
end 

// expected write_date[11]
initial
begin
	write_date_expected[11] = 1'bX;
	write_date_expected[11] = #999000 1'b0;
end 

// expected write_date[10]
initial
begin
	write_date_expected[10] = 1'bX;
	write_date_expected[10] = #999000 1'b0;
end 

// expected write_date[9]
initial
begin
	write_date_expected[9] = 1'bX;
	write_date_expected[9] = #999000 1'b0;
end 

// expected write_date[8]
initial
begin
	write_date_expected[8] = 1'bX;
	write_date_expected[8] = #999000 1'b0;
end 

// expected write_date[7]
initial
begin
	write_date_expected[7] = 1'bX;
	write_date_expected[7] = #999000 1'b0;
end 

// expected write_date[6]
initial
begin
	write_date_expected[6] = 1'bX;
	write_date_expected[6] = #999000 1'b0;
end 

// expected write_date[5]
initial
begin
	write_date_expected[5] = 1'bX;
	write_date_expected[5] = #999000 1'b0;
end 

// expected write_date[4]
initial
begin
	write_date_expected[4] = 1'bX;
	write_date_expected[4] = #999000 1'b0;
end 

// expected write_date[3]
initial
begin
	write_date_expected[3] = 1'bX;
	write_date_expected[3] = #999000 1'b0;
end 

// expected write_date[2]
initial
begin
	write_date_expected[2] = 1'bX;
	write_date_expected[2] = #999000 1'b0;
end 

// expected write_date[1]
initial
begin
	write_date_expected[1] = 1'bX;
	write_date_expected[1] = #999000 1'b0;
end 

// expected write_date[0]
initial
begin
	write_date_expected[0] = 1'bX;
	write_date_expected[0] = #999000 1'b0;
end 

// expected inst_cache_en
initial
begin
	inst_cache_en_expected = 1'bX;
	inst_cache_en_expected = #999000 1'b0;
end 

// expected do_update
initial
begin
	do_update_expected = 1'bX;
	do_update_expected = #999000 1'b0;
end 

// expected reg_write
initial
begin
	reg_write_expected = 1'bX;
	reg_write_expected = #999000 1'b0;
end 

// expected is_shamt_load
initial
begin
	is_shamt_load_expected = 1'bX;
	is_shamt_load_expected = #999000 1'b0;
end 
// expected ReadDataOne[ 31 ]
initial
begin
	ReadDataOne_expected[31] = 1'bX;
	ReadDataOne_expected[31] = #999000 1'b0;
end 
// expected ReadDataOne[ 30 ]
initial
begin
	ReadDataOne_expected[30] = 1'bX;
	ReadDataOne_expected[30] = #999000 1'b0;
end 
// expected ReadDataOne[ 29 ]
initial
begin
	ReadDataOne_expected[29] = 1'bX;
	ReadDataOne_expected[29] = #999000 1'b0;
end 
// expected ReadDataOne[ 28 ]
initial
begin
	ReadDataOne_expected[28] = 1'bX;
	ReadDataOne_expected[28] = #999000 1'b0;
end 
// expected ReadDataOne[ 27 ]
initial
begin
	ReadDataOne_expected[27] = 1'bX;
	ReadDataOne_expected[27] = #999000 1'b0;
end 
// expected ReadDataOne[ 26 ]
initial
begin
	ReadDataOne_expected[26] = 1'bX;
	ReadDataOne_expected[26] = #999000 1'b0;
end 
// expected ReadDataOne[ 25 ]
initial
begin
	ReadDataOne_expected[25] = 1'bX;
	ReadDataOne_expected[25] = #999000 1'b0;
end 
// expected ReadDataOne[ 24 ]
initial
begin
	ReadDataOne_expected[24] = 1'bX;
	ReadDataOne_expected[24] = #999000 1'b0;
end 
// expected ReadDataOne[ 23 ]
initial
begin
	ReadDataOne_expected[23] = 1'bX;
	ReadDataOne_expected[23] = #999000 1'b0;
end 
// expected ReadDataOne[ 22 ]
initial
begin
	ReadDataOne_expected[22] = 1'bX;
	ReadDataOne_expected[22] = #999000 1'b0;
end 
// expected ReadDataOne[ 21 ]
initial
begin
	ReadDataOne_expected[21] = 1'bX;
	ReadDataOne_expected[21] = #999000 1'b0;
end 
// expected ReadDataOne[ 20 ]
initial
begin
	ReadDataOne_expected[20] = 1'bX;
	ReadDataOne_expected[20] = #999000 1'b0;
end 
// expected ReadDataOne[ 19 ]
initial
begin
	ReadDataOne_expected[19] = 1'bX;
	ReadDataOne_expected[19] = #999000 1'b0;
end 
// expected ReadDataOne[ 18 ]
initial
begin
	ReadDataOne_expected[18] = 1'bX;
	ReadDataOne_expected[18] = #999000 1'b0;
end 
// expected ReadDataOne[ 17 ]
initial
begin
	ReadDataOne_expected[17] = 1'bX;
	ReadDataOne_expected[17] = #999000 1'b0;
end 
// expected ReadDataOne[ 16 ]
initial
begin
	ReadDataOne_expected[16] = 1'bX;
	ReadDataOne_expected[16] = #999000 1'b0;
end 
// expected ReadDataOne[ 15 ]
initial
begin
	ReadDataOne_expected[15] = 1'bX;
	ReadDataOne_expected[15] = #999000 1'b0;
end 
// expected ReadDataOne[ 14 ]
initial
begin
	ReadDataOne_expected[14] = 1'bX;
	ReadDataOne_expected[14] = #999000 1'b0;
end 
// expected ReadDataOne[ 13 ]
initial
begin
	ReadDataOne_expected[13] = 1'bX;
	ReadDataOne_expected[13] = #999000 1'b0;
end 
// expected ReadDataOne[ 12 ]
initial
begin
	ReadDataOne_expected[12] = 1'bX;
	ReadDataOne_expected[12] = #999000 1'b0;
end 
// expected ReadDataOne[ 11 ]
initial
begin
	ReadDataOne_expected[11] = 1'bX;
	ReadDataOne_expected[11] = #999000 1'b0;
end 
// expected ReadDataOne[ 10 ]
initial
begin
	ReadDataOne_expected[10] = 1'bX;
	ReadDataOne_expected[10] = #999000 1'b0;
end 
// expected ReadDataOne[ 9 ]
initial
begin
	ReadDataOne_expected[9] = 1'bX;
	ReadDataOne_expected[9] = #999000 1'b0;
end 
// expected ReadDataOne[ 8 ]
initial
begin
	ReadDataOne_expected[8] = 1'bX;
	ReadDataOne_expected[8] = #999000 1'b0;
end 
// expected ReadDataOne[ 7 ]
initial
begin
	ReadDataOne_expected[7] = 1'bX;
	ReadDataOne_expected[7] = #999000 1'b0;
end 
// expected ReadDataOne[ 6 ]
initial
begin
	ReadDataOne_expected[6] = 1'bX;
	ReadDataOne_expected[6] = #999000 1'b0;
end 
// expected ReadDataOne[ 5 ]
initial
begin
	ReadDataOne_expected[5] = 1'bX;
	ReadDataOne_expected[5] = #999000 1'b0;
end 
// expected ReadDataOne[ 4 ]
initial
begin
	ReadDataOne_expected[4] = 1'bX;
	ReadDataOne_expected[4] = #999000 1'b0;
end 
// expected ReadDataOne[ 3 ]
initial
begin
	ReadDataOne_expected[3] = 1'bX;
	ReadDataOne_expected[3] = #999000 1'b0;
end 
// expected ReadDataOne[ 2 ]
initial
begin
	ReadDataOne_expected[2] = 1'bX;
	ReadDataOne_expected[2] = #999000 1'b0;
end 
// expected ReadDataOne[ 1 ]
initial
begin
	ReadDataOne_expected[1] = 1'bX;
	ReadDataOne_expected[1] = #999000 1'b0;
end 
// expected ReadDataOne[ 0 ]
initial
begin
	ReadDataOne_expected[0] = 1'bX;
	ReadDataOne_expected[0] = #999000 1'b0;
end 
// expected ReadDataTwo[ 31 ]
initial
begin
	ReadDataTwo_expected[31] = 1'bX;
	ReadDataTwo_expected[31] = #999000 1'b0;
end 
// expected ReadDataTwo[ 30 ]
initial
begin
	ReadDataTwo_expected[30] = 1'bX;
	ReadDataTwo_expected[30] = #999000 1'b0;
end 
// expected ReadDataTwo[ 29 ]
initial
begin
	ReadDataTwo_expected[29] = 1'bX;
	ReadDataTwo_expected[29] = #999000 1'b0;
end 
// expected ReadDataTwo[ 28 ]
initial
begin
	ReadDataTwo_expected[28] = 1'bX;
	ReadDataTwo_expected[28] = #999000 1'b0;
end 
// expected ReadDataTwo[ 27 ]
initial
begin
	ReadDataTwo_expected[27] = 1'bX;
	ReadDataTwo_expected[27] = #999000 1'b0;
end 
// expected ReadDataTwo[ 26 ]
initial
begin
	ReadDataTwo_expected[26] = 1'bX;
	ReadDataTwo_expected[26] = #999000 1'b0;
end 
// expected ReadDataTwo[ 25 ]
initial
begin
	ReadDataTwo_expected[25] = 1'bX;
	ReadDataTwo_expected[25] = #999000 1'b0;
end 
// expected ReadDataTwo[ 24 ]
initial
begin
	ReadDataTwo_expected[24] = 1'bX;
	ReadDataTwo_expected[24] = #999000 1'b0;
end 
// expected ReadDataTwo[ 23 ]
initial
begin
	ReadDataTwo_expected[23] = 1'bX;
	ReadDataTwo_expected[23] = #999000 1'b0;
end 
// expected ReadDataTwo[ 22 ]
initial
begin
	ReadDataTwo_expected[22] = 1'bX;
	ReadDataTwo_expected[22] = #999000 1'b0;
end 
// expected ReadDataTwo[ 21 ]
initial
begin
	ReadDataTwo_expected[21] = 1'bX;
	ReadDataTwo_expected[21] = #999000 1'b0;
end 
// expected ReadDataTwo[ 20 ]
initial
begin
	ReadDataTwo_expected[20] = 1'bX;
	ReadDataTwo_expected[20] = #999000 1'b0;
end 
// expected ReadDataTwo[ 19 ]
initial
begin
	ReadDataTwo_expected[19] = 1'bX;
	ReadDataTwo_expected[19] = #999000 1'b0;
end 
// expected ReadDataTwo[ 18 ]
initial
begin
	ReadDataTwo_expected[18] = 1'bX;
	ReadDataTwo_expected[18] = #999000 1'b0;
end 
// expected ReadDataTwo[ 17 ]
initial
begin
	ReadDataTwo_expected[17] = 1'bX;
	ReadDataTwo_expected[17] = #999000 1'b0;
end 
// expected ReadDataTwo[ 16 ]
initial
begin
	ReadDataTwo_expected[16] = 1'bX;
	ReadDataTwo_expected[16] = #999000 1'b0;
end 
// expected ReadDataTwo[ 15 ]
initial
begin
	ReadDataTwo_expected[15] = 1'bX;
	ReadDataTwo_expected[15] = #999000 1'b0;
end 
// expected ReadDataTwo[ 14 ]
initial
begin
	ReadDataTwo_expected[14] = 1'bX;
	ReadDataTwo_expected[14] = #999000 1'b0;
end 
// expected ReadDataTwo[ 13 ]
initial
begin
	ReadDataTwo_expected[13] = 1'bX;
	ReadDataTwo_expected[13] = #999000 1'b0;
end 
// expected ReadDataTwo[ 12 ]
initial
begin
	ReadDataTwo_expected[12] = 1'bX;
	ReadDataTwo_expected[12] = #999000 1'b0;
end 
// expected ReadDataTwo[ 11 ]
initial
begin
	ReadDataTwo_expected[11] = 1'bX;
	ReadDataTwo_expected[11] = #999000 1'b0;
end 
// expected ReadDataTwo[ 10 ]
initial
begin
	ReadDataTwo_expected[10] = 1'bX;
	ReadDataTwo_expected[10] = #999000 1'b0;
end 
// expected ReadDataTwo[ 9 ]
initial
begin
	ReadDataTwo_expected[9] = 1'bX;
	ReadDataTwo_expected[9] = #999000 1'b0;
end 
// expected ReadDataTwo[ 8 ]
initial
begin
	ReadDataTwo_expected[8] = 1'bX;
	ReadDataTwo_expected[8] = #999000 1'b0;
end 
// expected ReadDataTwo[ 7 ]
initial
begin
	ReadDataTwo_expected[7] = 1'bX;
	ReadDataTwo_expected[7] = #999000 1'b0;
end 
// expected ReadDataTwo[ 6 ]
initial
begin
	ReadDataTwo_expected[6] = 1'bX;
	ReadDataTwo_expected[6] = #999000 1'b0;
end 
// expected ReadDataTwo[ 5 ]
initial
begin
	ReadDataTwo_expected[5] = 1'bX;
	ReadDataTwo_expected[5] = #999000 1'b0;
end 
// expected ReadDataTwo[ 4 ]
initial
begin
	ReadDataTwo_expected[4] = 1'bX;
	ReadDataTwo_expected[4] = #999000 1'b0;
end 
// expected ReadDataTwo[ 3 ]
initial
begin
	ReadDataTwo_expected[3] = 1'bX;
	ReadDataTwo_expected[3] = #999000 1'b0;
end 
// expected ReadDataTwo[ 2 ]
initial
begin
	ReadDataTwo_expected[2] = 1'bX;
	ReadDataTwo_expected[2] = #999000 1'b0;
end 
// expected ReadDataTwo[ 1 ]
initial
begin
	ReadDataTwo_expected[1] = 1'bX;
	ReadDataTwo_expected[1] = #999000 1'b0;
end 
// expected ReadDataTwo[ 0 ]
initial
begin
	ReadDataTwo_expected[0] = 1'bX;
	ReadDataTwo_expected[0] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 31 ]
initial
begin
	ALU_INSTANT_OUT_expected[31] = 1'bX;
	ALU_INSTANT_OUT_expected[31] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 30 ]
initial
begin
	ALU_INSTANT_OUT_expected[30] = 1'bX;
	ALU_INSTANT_OUT_expected[30] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 29 ]
initial
begin
	ALU_INSTANT_OUT_expected[29] = 1'bX;
	ALU_INSTANT_OUT_expected[29] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 28 ]
initial
begin
	ALU_INSTANT_OUT_expected[28] = 1'bX;
	ALU_INSTANT_OUT_expected[28] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 27 ]
initial
begin
	ALU_INSTANT_OUT_expected[27] = 1'bX;
	ALU_INSTANT_OUT_expected[27] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 26 ]
initial
begin
	ALU_INSTANT_OUT_expected[26] = 1'bX;
	ALU_INSTANT_OUT_expected[26] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 25 ]
initial
begin
	ALU_INSTANT_OUT_expected[25] = 1'bX;
	ALU_INSTANT_OUT_expected[25] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 24 ]
initial
begin
	ALU_INSTANT_OUT_expected[24] = 1'bX;
	ALU_INSTANT_OUT_expected[24] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 23 ]
initial
begin
	ALU_INSTANT_OUT_expected[23] = 1'bX;
	ALU_INSTANT_OUT_expected[23] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 22 ]
initial
begin
	ALU_INSTANT_OUT_expected[22] = 1'bX;
	ALU_INSTANT_OUT_expected[22] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 21 ]
initial
begin
	ALU_INSTANT_OUT_expected[21] = 1'bX;
	ALU_INSTANT_OUT_expected[21] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 20 ]
initial
begin
	ALU_INSTANT_OUT_expected[20] = 1'bX;
	ALU_INSTANT_OUT_expected[20] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 19 ]
initial
begin
	ALU_INSTANT_OUT_expected[19] = 1'bX;
	ALU_INSTANT_OUT_expected[19] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 18 ]
initial
begin
	ALU_INSTANT_OUT_expected[18] = 1'bX;
	ALU_INSTANT_OUT_expected[18] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 17 ]
initial
begin
	ALU_INSTANT_OUT_expected[17] = 1'bX;
	ALU_INSTANT_OUT_expected[17] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 16 ]
initial
begin
	ALU_INSTANT_OUT_expected[16] = 1'bX;
	ALU_INSTANT_OUT_expected[16] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 15 ]
initial
begin
	ALU_INSTANT_OUT_expected[15] = 1'bX;
	ALU_INSTANT_OUT_expected[15] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 14 ]
initial
begin
	ALU_INSTANT_OUT_expected[14] = 1'bX;
	ALU_INSTANT_OUT_expected[14] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 13 ]
initial
begin
	ALU_INSTANT_OUT_expected[13] = 1'bX;
	ALU_INSTANT_OUT_expected[13] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 12 ]
initial
begin
	ALU_INSTANT_OUT_expected[12] = 1'bX;
	ALU_INSTANT_OUT_expected[12] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 11 ]
initial
begin
	ALU_INSTANT_OUT_expected[11] = 1'bX;
	ALU_INSTANT_OUT_expected[11] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 10 ]
initial
begin
	ALU_INSTANT_OUT_expected[10] = 1'bX;
	ALU_INSTANT_OUT_expected[10] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 9 ]
initial
begin
	ALU_INSTANT_OUT_expected[9] = 1'bX;
	ALU_INSTANT_OUT_expected[9] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 8 ]
initial
begin
	ALU_INSTANT_OUT_expected[8] = 1'bX;
	ALU_INSTANT_OUT_expected[8] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 7 ]
initial
begin
	ALU_INSTANT_OUT_expected[7] = 1'bX;
	ALU_INSTANT_OUT_expected[7] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 6 ]
initial
begin
	ALU_INSTANT_OUT_expected[6] = 1'bX;
	ALU_INSTANT_OUT_expected[6] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 5 ]
initial
begin
	ALU_INSTANT_OUT_expected[5] = 1'bX;
	ALU_INSTANT_OUT_expected[5] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 4 ]
initial
begin
	ALU_INSTANT_OUT_expected[4] = 1'bX;
	ALU_INSTANT_OUT_expected[4] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 3 ]
initial
begin
	ALU_INSTANT_OUT_expected[3] = 1'bX;
	ALU_INSTANT_OUT_expected[3] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 2 ]
initial
begin
	ALU_INSTANT_OUT_expected[2] = 1'bX;
	ALU_INSTANT_OUT_expected[2] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 1 ]
initial
begin
	ALU_INSTANT_OUT_expected[1] = 1'bX;
	ALU_INSTANT_OUT_expected[1] = #999000 1'b0;
end 
// expected ALU_INSTANT_OUT[ 0 ]
initial
begin
	ALU_INSTANT_OUT_expected[0] = 1'bX;
	ALU_INSTANT_OUT_expected[0] = #999000 1'b0;
end 
// expected ALU_1_IN[ 31 ]
initial
begin
	ALU_1_IN_expected[31] = 1'bX;
end 
// expected ALU_1_IN[ 30 ]
initial
begin
	ALU_1_IN_expected[30] = 1'bX;
end 
// expected ALU_1_IN[ 29 ]
initial
begin
	ALU_1_IN_expected[29] = 1'bX;
end 
// expected ALU_1_IN[ 28 ]
initial
begin
	ALU_1_IN_expected[28] = 1'bX;
end 
// expected ALU_1_IN[ 27 ]
initial
begin
	ALU_1_IN_expected[27] = 1'bX;
end 
// expected ALU_1_IN[ 26 ]
initial
begin
	ALU_1_IN_expected[26] = 1'bX;
end 
// expected ALU_1_IN[ 25 ]
initial
begin
	ALU_1_IN_expected[25] = 1'bX;
end 
// expected ALU_1_IN[ 24 ]
initial
begin
	ALU_1_IN_expected[24] = 1'bX;
end 
// expected ALU_1_IN[ 23 ]
initial
begin
	ALU_1_IN_expected[23] = 1'bX;
end 
// expected ALU_1_IN[ 22 ]
initial
begin
	ALU_1_IN_expected[22] = 1'bX;
end 
// expected ALU_1_IN[ 21 ]
initial
begin
	ALU_1_IN_expected[21] = 1'bX;
end 
// expected ALU_1_IN[ 20 ]
initial
begin
	ALU_1_IN_expected[20] = 1'bX;
end 
// expected ALU_1_IN[ 19 ]
initial
begin
	ALU_1_IN_expected[19] = 1'bX;
end 
// expected ALU_1_IN[ 18 ]
initial
begin
	ALU_1_IN_expected[18] = 1'bX;
end 
// expected ALU_1_IN[ 17 ]
initial
begin
	ALU_1_IN_expected[17] = 1'bX;
end 
// expected ALU_1_IN[ 16 ]
initial
begin
	ALU_1_IN_expected[16] = 1'bX;
end 
// expected ALU_1_IN[ 15 ]
initial
begin
	ALU_1_IN_expected[15] = 1'bX;
end 
// expected ALU_1_IN[ 14 ]
initial
begin
	ALU_1_IN_expected[14] = 1'bX;
end 
// expected ALU_1_IN[ 13 ]
initial
begin
	ALU_1_IN_expected[13] = 1'bX;
end 
// expected ALU_1_IN[ 12 ]
initial
begin
	ALU_1_IN_expected[12] = 1'bX;
end 
// expected ALU_1_IN[ 11 ]
initial
begin
	ALU_1_IN_expected[11] = 1'bX;
end 
// expected ALU_1_IN[ 10 ]
initial
begin
	ALU_1_IN_expected[10] = 1'bX;
end 
// expected ALU_1_IN[ 9 ]
initial
begin
	ALU_1_IN_expected[9] = 1'bX;
end 
// expected ALU_1_IN[ 8 ]
initial
begin
	ALU_1_IN_expected[8] = 1'bX;
end 
// expected ALU_1_IN[ 7 ]
initial
begin
	ALU_1_IN_expected[7] = 1'bX;
end 
// expected ALU_1_IN[ 6 ]
initial
begin
	ALU_1_IN_expected[6] = 1'bX;
end 
// expected ALU_1_IN[ 5 ]
initial
begin
	ALU_1_IN_expected[5] = 1'bX;
end 
// expected ALU_1_IN[ 4 ]
initial
begin
	ALU_1_IN_expected[4] = 1'bX;
end 
// expected ALU_1_IN[ 3 ]
initial
begin
	ALU_1_IN_expected[3] = 1'bX;
end 
// expected ALU_1_IN[ 2 ]
initial
begin
	ALU_1_IN_expected[2] = 1'bX;
end 
// expected ALU_1_IN[ 1 ]
initial
begin
	ALU_1_IN_expected[1] = 1'bX;
end 
// expected ALU_1_IN[ 0 ]
initial
begin
	ALU_1_IN_expected[0] = 1'bX;
end 
// expected ALU_2_IN[ 31 ]
initial
begin
	ALU_2_IN_expected[31] = 1'bX;
end 
// expected ALU_2_IN[ 30 ]
initial
begin
	ALU_2_IN_expected[30] = 1'bX;
end 
// expected ALU_2_IN[ 29 ]
initial
begin
	ALU_2_IN_expected[29] = 1'bX;
end 
// expected ALU_2_IN[ 28 ]
initial
begin
	ALU_2_IN_expected[28] = 1'bX;
end 
// expected ALU_2_IN[ 27 ]
initial
begin
	ALU_2_IN_expected[27] = 1'bX;
end 
// expected ALU_2_IN[ 26 ]
initial
begin
	ALU_2_IN_expected[26] = 1'bX;
end 
// expected ALU_2_IN[ 25 ]
initial
begin
	ALU_2_IN_expected[25] = 1'bX;
end 
// expected ALU_2_IN[ 24 ]
initial
begin
	ALU_2_IN_expected[24] = 1'bX;
end 
// expected ALU_2_IN[ 23 ]
initial
begin
	ALU_2_IN_expected[23] = 1'bX;
end 
// expected ALU_2_IN[ 22 ]
initial
begin
	ALU_2_IN_expected[22] = 1'bX;
end 
// expected ALU_2_IN[ 21 ]
initial
begin
	ALU_2_IN_expected[21] = 1'bX;
end 
// expected ALU_2_IN[ 20 ]
initial
begin
	ALU_2_IN_expected[20] = 1'bX;
end 
// expected ALU_2_IN[ 19 ]
initial
begin
	ALU_2_IN_expected[19] = 1'bX;
end 
// expected ALU_2_IN[ 18 ]
initial
begin
	ALU_2_IN_expected[18] = 1'bX;
end 
// expected ALU_2_IN[ 17 ]
initial
begin
	ALU_2_IN_expected[17] = 1'bX;
end 
// expected ALU_2_IN[ 16 ]
initial
begin
	ALU_2_IN_expected[16] = 1'bX;
end 
// expected ALU_2_IN[ 15 ]
initial
begin
	ALU_2_IN_expected[15] = 1'bX;
end 
// expected ALU_2_IN[ 14 ]
initial
begin
	ALU_2_IN_expected[14] = 1'bX;
end 
// expected ALU_2_IN[ 13 ]
initial
begin
	ALU_2_IN_expected[13] = 1'bX;
end 
// expected ALU_2_IN[ 12 ]
initial
begin
	ALU_2_IN_expected[12] = 1'bX;
end 
// expected ALU_2_IN[ 11 ]
initial
begin
	ALU_2_IN_expected[11] = 1'bX;
end 
// expected ALU_2_IN[ 10 ]
initial
begin
	ALU_2_IN_expected[10] = 1'bX;
end 
// expected ALU_2_IN[ 9 ]
initial
begin
	ALU_2_IN_expected[9] = 1'bX;
end 
// expected ALU_2_IN[ 8 ]
initial
begin
	ALU_2_IN_expected[8] = 1'bX;
end 
// expected ALU_2_IN[ 7 ]
initial
begin
	ALU_2_IN_expected[7] = 1'bX;
end 
// expected ALU_2_IN[ 6 ]
initial
begin
	ALU_2_IN_expected[6] = 1'bX;
end 
// expected ALU_2_IN[ 5 ]
initial
begin
	ALU_2_IN_expected[5] = 1'bX;
end 
// expected ALU_2_IN[ 4 ]
initial
begin
	ALU_2_IN_expected[4] = 1'bX;
end 
// expected ALU_2_IN[ 3 ]
initial
begin
	ALU_2_IN_expected[3] = 1'bX;
end 
// expected ALU_2_IN[ 2 ]
initial
begin
	ALU_2_IN_expected[2] = 1'bX;
end 
// expected ALU_2_IN[ 1 ]
initial
begin
	ALU_2_IN_expected[1] = 1'bX;
end 
// expected ALU_2_IN[ 0 ]
initial
begin
	ALU_2_IN_expected[0] = 1'bX;
end 
// expected ALU_OPCODE[ 3 ]
initial
begin
	ALU_OPCODE_expected[3] = 1'bX;
end 
// expected ALU_OPCODE[ 2 ]
initial
begin
	ALU_OPCODE_expected[2] = 1'bX;
end 
// expected ALU_OPCODE[ 1 ]
initial
begin
	ALU_OPCODE_expected[1] = 1'bX;
end 
// expected ALU_OPCODE[ 0 ]
initial
begin
	ALU_OPCODE_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_1_IN_expected or ALU_1_IN or ALU_2_IN_expected or ALU_2_IN or ALU_INSTANT_OUT_expected or ALU_INSTANT_OUT or ALU_OPCODE_expected or ALU_OPCODE or do_update_expected or do_update or eq_expected or eq or inst_cache_en_expected or inst_cache_en or instr_expected or instr or is_shamt_load_expected or is_shamt_load or overflow_expected or overflow or pc_expected or pc or ReadDataOne_expected or ReadDataOne or ReadDataTwo_expected or ReadDataTwo or reg_write_expected or reg_write or sgn_expected or sgn or write_date_expected or write_date or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_1_IN = %b | expected ALU_2_IN = %b | expected ALU_INSTANT_OUT = %b | expected ALU_OPCODE = %b | expected do_update = %b | expected eq = %b | expected inst_cache_en = %b | expected instr = %b | expected is_shamt_load = %b | expected overflow = %b | expected pc = %b | expected ReadDataOne = %b | expected ReadDataTwo = %b | expected reg_write = %b | expected sgn = %b | expected write_date = %b | expected zero = %b | ",ALU_1_IN_expected_prev,ALU_2_IN_expected_prev,ALU_INSTANT_OUT_expected_prev,ALU_OPCODE_expected_prev,do_update_expected_prev,eq_expected_prev,inst_cache_en_expected_prev,instr_expected_prev,is_shamt_load_expected_prev,overflow_expected_prev,pc_expected_prev,ReadDataOne_expected_prev,ReadDataTwo_expected_prev,reg_write_expected_prev,sgn_expected_prev,write_date_expected_prev,zero_expected_prev);
	$display("| real ALU_1_IN = %b | real ALU_2_IN = %b | real ALU_INSTANT_OUT = %b | real ALU_OPCODE = %b | real do_update = %b | real eq = %b | real inst_cache_en = %b | real instr = %b | real is_shamt_load = %b | real overflow = %b | real pc = %b | real ReadDataOne = %b | real ReadDataTwo = %b | real reg_write = %b | real sgn = %b | real write_date = %b | real zero = %b | ",ALU_1_IN_prev,ALU_2_IN_prev,ALU_INSTANT_OUT_prev,ALU_OPCODE_prev,do_update_prev,eq_prev,inst_cache_en_prev,instr_prev,is_shamt_load_prev,overflow_prev,pc_prev,ReadDataOne_prev,ReadDataTwo_prev,reg_write_prev,sgn_prev,write_date_prev,zero_prev);
`endif
	if (
		( ALU_1_IN_expected_prev[0] !== 1'bx ) && ( ALU_1_IN_prev[0] !== ALU_1_IN_expected_prev[0] )
		&& ((ALU_1_IN_expected_prev[0] !== last_ALU_1_IN_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[0] = ALU_1_IN_expected_prev[0];
	end
	if (
		( ALU_1_IN_expected_prev[1] !== 1'bx ) && ( ALU_1_IN_prev[1] !== ALU_1_IN_expected_prev[1] )
		&& ((ALU_1_IN_expected_prev[1] !== last_ALU_1_IN_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[1] = ALU_1_IN_expected_prev[1];
	end
	if (
		( ALU_1_IN_expected_prev[2] !== 1'bx ) && ( ALU_1_IN_prev[2] !== ALU_1_IN_expected_prev[2] )
		&& ((ALU_1_IN_expected_prev[2] !== last_ALU_1_IN_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[2] = ALU_1_IN_expected_prev[2];
	end
	if (
		( ALU_1_IN_expected_prev[3] !== 1'bx ) && ( ALU_1_IN_prev[3] !== ALU_1_IN_expected_prev[3] )
		&& ((ALU_1_IN_expected_prev[3] !== last_ALU_1_IN_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[3] = ALU_1_IN_expected_prev[3];
	end
	if (
		( ALU_1_IN_expected_prev[4] !== 1'bx ) && ( ALU_1_IN_prev[4] !== ALU_1_IN_expected_prev[4] )
		&& ((ALU_1_IN_expected_prev[4] !== last_ALU_1_IN_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[4] = ALU_1_IN_expected_prev[4];
	end
	if (
		( ALU_1_IN_expected_prev[5] !== 1'bx ) && ( ALU_1_IN_prev[5] !== ALU_1_IN_expected_prev[5] )
		&& ((ALU_1_IN_expected_prev[5] !== last_ALU_1_IN_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[5] = ALU_1_IN_expected_prev[5];
	end
	if (
		( ALU_1_IN_expected_prev[6] !== 1'bx ) && ( ALU_1_IN_prev[6] !== ALU_1_IN_expected_prev[6] )
		&& ((ALU_1_IN_expected_prev[6] !== last_ALU_1_IN_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[6] = ALU_1_IN_expected_prev[6];
	end
	if (
		( ALU_1_IN_expected_prev[7] !== 1'bx ) && ( ALU_1_IN_prev[7] !== ALU_1_IN_expected_prev[7] )
		&& ((ALU_1_IN_expected_prev[7] !== last_ALU_1_IN_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[7] = ALU_1_IN_expected_prev[7];
	end
	if (
		( ALU_1_IN_expected_prev[8] !== 1'bx ) && ( ALU_1_IN_prev[8] !== ALU_1_IN_expected_prev[8] )
		&& ((ALU_1_IN_expected_prev[8] !== last_ALU_1_IN_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[8] = ALU_1_IN_expected_prev[8];
	end
	if (
		( ALU_1_IN_expected_prev[9] !== 1'bx ) && ( ALU_1_IN_prev[9] !== ALU_1_IN_expected_prev[9] )
		&& ((ALU_1_IN_expected_prev[9] !== last_ALU_1_IN_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[9] = ALU_1_IN_expected_prev[9];
	end
	if (
		( ALU_1_IN_expected_prev[10] !== 1'bx ) && ( ALU_1_IN_prev[10] !== ALU_1_IN_expected_prev[10] )
		&& ((ALU_1_IN_expected_prev[10] !== last_ALU_1_IN_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[10] = ALU_1_IN_expected_prev[10];
	end
	if (
		( ALU_1_IN_expected_prev[11] !== 1'bx ) && ( ALU_1_IN_prev[11] !== ALU_1_IN_expected_prev[11] )
		&& ((ALU_1_IN_expected_prev[11] !== last_ALU_1_IN_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[11] = ALU_1_IN_expected_prev[11];
	end
	if (
		( ALU_1_IN_expected_prev[12] !== 1'bx ) && ( ALU_1_IN_prev[12] !== ALU_1_IN_expected_prev[12] )
		&& ((ALU_1_IN_expected_prev[12] !== last_ALU_1_IN_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[12] = ALU_1_IN_expected_prev[12];
	end
	if (
		( ALU_1_IN_expected_prev[13] !== 1'bx ) && ( ALU_1_IN_prev[13] !== ALU_1_IN_expected_prev[13] )
		&& ((ALU_1_IN_expected_prev[13] !== last_ALU_1_IN_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[13] = ALU_1_IN_expected_prev[13];
	end
	if (
		( ALU_1_IN_expected_prev[14] !== 1'bx ) && ( ALU_1_IN_prev[14] !== ALU_1_IN_expected_prev[14] )
		&& ((ALU_1_IN_expected_prev[14] !== last_ALU_1_IN_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[14] = ALU_1_IN_expected_prev[14];
	end
	if (
		( ALU_1_IN_expected_prev[15] !== 1'bx ) && ( ALU_1_IN_prev[15] !== ALU_1_IN_expected_prev[15] )
		&& ((ALU_1_IN_expected_prev[15] !== last_ALU_1_IN_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[15] = ALU_1_IN_expected_prev[15];
	end
	if (
		( ALU_1_IN_expected_prev[16] !== 1'bx ) && ( ALU_1_IN_prev[16] !== ALU_1_IN_expected_prev[16] )
		&& ((ALU_1_IN_expected_prev[16] !== last_ALU_1_IN_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[16] = ALU_1_IN_expected_prev[16];
	end
	if (
		( ALU_1_IN_expected_prev[17] !== 1'bx ) && ( ALU_1_IN_prev[17] !== ALU_1_IN_expected_prev[17] )
		&& ((ALU_1_IN_expected_prev[17] !== last_ALU_1_IN_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[17] = ALU_1_IN_expected_prev[17];
	end
	if (
		( ALU_1_IN_expected_prev[18] !== 1'bx ) && ( ALU_1_IN_prev[18] !== ALU_1_IN_expected_prev[18] )
		&& ((ALU_1_IN_expected_prev[18] !== last_ALU_1_IN_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[18] = ALU_1_IN_expected_prev[18];
	end
	if (
		( ALU_1_IN_expected_prev[19] !== 1'bx ) && ( ALU_1_IN_prev[19] !== ALU_1_IN_expected_prev[19] )
		&& ((ALU_1_IN_expected_prev[19] !== last_ALU_1_IN_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[19] = ALU_1_IN_expected_prev[19];
	end
	if (
		( ALU_1_IN_expected_prev[20] !== 1'bx ) && ( ALU_1_IN_prev[20] !== ALU_1_IN_expected_prev[20] )
		&& ((ALU_1_IN_expected_prev[20] !== last_ALU_1_IN_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[20] = ALU_1_IN_expected_prev[20];
	end
	if (
		( ALU_1_IN_expected_prev[21] !== 1'bx ) && ( ALU_1_IN_prev[21] !== ALU_1_IN_expected_prev[21] )
		&& ((ALU_1_IN_expected_prev[21] !== last_ALU_1_IN_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[21] = ALU_1_IN_expected_prev[21];
	end
	if (
		( ALU_1_IN_expected_prev[22] !== 1'bx ) && ( ALU_1_IN_prev[22] !== ALU_1_IN_expected_prev[22] )
		&& ((ALU_1_IN_expected_prev[22] !== last_ALU_1_IN_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[22] = ALU_1_IN_expected_prev[22];
	end
	if (
		( ALU_1_IN_expected_prev[23] !== 1'bx ) && ( ALU_1_IN_prev[23] !== ALU_1_IN_expected_prev[23] )
		&& ((ALU_1_IN_expected_prev[23] !== last_ALU_1_IN_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[23] = ALU_1_IN_expected_prev[23];
	end
	if (
		( ALU_1_IN_expected_prev[24] !== 1'bx ) && ( ALU_1_IN_prev[24] !== ALU_1_IN_expected_prev[24] )
		&& ((ALU_1_IN_expected_prev[24] !== last_ALU_1_IN_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[24] = ALU_1_IN_expected_prev[24];
	end
	if (
		( ALU_1_IN_expected_prev[25] !== 1'bx ) && ( ALU_1_IN_prev[25] !== ALU_1_IN_expected_prev[25] )
		&& ((ALU_1_IN_expected_prev[25] !== last_ALU_1_IN_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[25] = ALU_1_IN_expected_prev[25];
	end
	if (
		( ALU_1_IN_expected_prev[26] !== 1'bx ) && ( ALU_1_IN_prev[26] !== ALU_1_IN_expected_prev[26] )
		&& ((ALU_1_IN_expected_prev[26] !== last_ALU_1_IN_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[26] = ALU_1_IN_expected_prev[26];
	end
	if (
		( ALU_1_IN_expected_prev[27] !== 1'bx ) && ( ALU_1_IN_prev[27] !== ALU_1_IN_expected_prev[27] )
		&& ((ALU_1_IN_expected_prev[27] !== last_ALU_1_IN_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[27] = ALU_1_IN_expected_prev[27];
	end
	if (
		( ALU_1_IN_expected_prev[28] !== 1'bx ) && ( ALU_1_IN_prev[28] !== ALU_1_IN_expected_prev[28] )
		&& ((ALU_1_IN_expected_prev[28] !== last_ALU_1_IN_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[28] = ALU_1_IN_expected_prev[28];
	end
	if (
		( ALU_1_IN_expected_prev[29] !== 1'bx ) && ( ALU_1_IN_prev[29] !== ALU_1_IN_expected_prev[29] )
		&& ((ALU_1_IN_expected_prev[29] !== last_ALU_1_IN_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[29] = ALU_1_IN_expected_prev[29];
	end
	if (
		( ALU_1_IN_expected_prev[30] !== 1'bx ) && ( ALU_1_IN_prev[30] !== ALU_1_IN_expected_prev[30] )
		&& ((ALU_1_IN_expected_prev[30] !== last_ALU_1_IN_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[30] = ALU_1_IN_expected_prev[30];
	end
	if (
		( ALU_1_IN_expected_prev[31] !== 1'bx ) && ( ALU_1_IN_prev[31] !== ALU_1_IN_expected_prev[31] )
		&& ((ALU_1_IN_expected_prev[31] !== last_ALU_1_IN_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_1_IN[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_1_IN_expected_prev);
		$display ("     Real value = %b", ALU_1_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_1_IN_exp[31] = ALU_1_IN_expected_prev[31];
	end
	if (
		( ALU_2_IN_expected_prev[0] !== 1'bx ) && ( ALU_2_IN_prev[0] !== ALU_2_IN_expected_prev[0] )
		&& ((ALU_2_IN_expected_prev[0] !== last_ALU_2_IN_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[0] = ALU_2_IN_expected_prev[0];
	end
	if (
		( ALU_2_IN_expected_prev[1] !== 1'bx ) && ( ALU_2_IN_prev[1] !== ALU_2_IN_expected_prev[1] )
		&& ((ALU_2_IN_expected_prev[1] !== last_ALU_2_IN_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[1] = ALU_2_IN_expected_prev[1];
	end
	if (
		( ALU_2_IN_expected_prev[2] !== 1'bx ) && ( ALU_2_IN_prev[2] !== ALU_2_IN_expected_prev[2] )
		&& ((ALU_2_IN_expected_prev[2] !== last_ALU_2_IN_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[2] = ALU_2_IN_expected_prev[2];
	end
	if (
		( ALU_2_IN_expected_prev[3] !== 1'bx ) && ( ALU_2_IN_prev[3] !== ALU_2_IN_expected_prev[3] )
		&& ((ALU_2_IN_expected_prev[3] !== last_ALU_2_IN_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[3] = ALU_2_IN_expected_prev[3];
	end
	if (
		( ALU_2_IN_expected_prev[4] !== 1'bx ) && ( ALU_2_IN_prev[4] !== ALU_2_IN_expected_prev[4] )
		&& ((ALU_2_IN_expected_prev[4] !== last_ALU_2_IN_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[4] = ALU_2_IN_expected_prev[4];
	end
	if (
		( ALU_2_IN_expected_prev[5] !== 1'bx ) && ( ALU_2_IN_prev[5] !== ALU_2_IN_expected_prev[5] )
		&& ((ALU_2_IN_expected_prev[5] !== last_ALU_2_IN_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[5] = ALU_2_IN_expected_prev[5];
	end
	if (
		( ALU_2_IN_expected_prev[6] !== 1'bx ) && ( ALU_2_IN_prev[6] !== ALU_2_IN_expected_prev[6] )
		&& ((ALU_2_IN_expected_prev[6] !== last_ALU_2_IN_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[6] = ALU_2_IN_expected_prev[6];
	end
	if (
		( ALU_2_IN_expected_prev[7] !== 1'bx ) && ( ALU_2_IN_prev[7] !== ALU_2_IN_expected_prev[7] )
		&& ((ALU_2_IN_expected_prev[7] !== last_ALU_2_IN_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[7] = ALU_2_IN_expected_prev[7];
	end
	if (
		( ALU_2_IN_expected_prev[8] !== 1'bx ) && ( ALU_2_IN_prev[8] !== ALU_2_IN_expected_prev[8] )
		&& ((ALU_2_IN_expected_prev[8] !== last_ALU_2_IN_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[8] = ALU_2_IN_expected_prev[8];
	end
	if (
		( ALU_2_IN_expected_prev[9] !== 1'bx ) && ( ALU_2_IN_prev[9] !== ALU_2_IN_expected_prev[9] )
		&& ((ALU_2_IN_expected_prev[9] !== last_ALU_2_IN_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[9] = ALU_2_IN_expected_prev[9];
	end
	if (
		( ALU_2_IN_expected_prev[10] !== 1'bx ) && ( ALU_2_IN_prev[10] !== ALU_2_IN_expected_prev[10] )
		&& ((ALU_2_IN_expected_prev[10] !== last_ALU_2_IN_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[10] = ALU_2_IN_expected_prev[10];
	end
	if (
		( ALU_2_IN_expected_prev[11] !== 1'bx ) && ( ALU_2_IN_prev[11] !== ALU_2_IN_expected_prev[11] )
		&& ((ALU_2_IN_expected_prev[11] !== last_ALU_2_IN_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[11] = ALU_2_IN_expected_prev[11];
	end
	if (
		( ALU_2_IN_expected_prev[12] !== 1'bx ) && ( ALU_2_IN_prev[12] !== ALU_2_IN_expected_prev[12] )
		&& ((ALU_2_IN_expected_prev[12] !== last_ALU_2_IN_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[12] = ALU_2_IN_expected_prev[12];
	end
	if (
		( ALU_2_IN_expected_prev[13] !== 1'bx ) && ( ALU_2_IN_prev[13] !== ALU_2_IN_expected_prev[13] )
		&& ((ALU_2_IN_expected_prev[13] !== last_ALU_2_IN_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[13] = ALU_2_IN_expected_prev[13];
	end
	if (
		( ALU_2_IN_expected_prev[14] !== 1'bx ) && ( ALU_2_IN_prev[14] !== ALU_2_IN_expected_prev[14] )
		&& ((ALU_2_IN_expected_prev[14] !== last_ALU_2_IN_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[14] = ALU_2_IN_expected_prev[14];
	end
	if (
		( ALU_2_IN_expected_prev[15] !== 1'bx ) && ( ALU_2_IN_prev[15] !== ALU_2_IN_expected_prev[15] )
		&& ((ALU_2_IN_expected_prev[15] !== last_ALU_2_IN_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[15] = ALU_2_IN_expected_prev[15];
	end
	if (
		( ALU_2_IN_expected_prev[16] !== 1'bx ) && ( ALU_2_IN_prev[16] !== ALU_2_IN_expected_prev[16] )
		&& ((ALU_2_IN_expected_prev[16] !== last_ALU_2_IN_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[16] = ALU_2_IN_expected_prev[16];
	end
	if (
		( ALU_2_IN_expected_prev[17] !== 1'bx ) && ( ALU_2_IN_prev[17] !== ALU_2_IN_expected_prev[17] )
		&& ((ALU_2_IN_expected_prev[17] !== last_ALU_2_IN_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[17] = ALU_2_IN_expected_prev[17];
	end
	if (
		( ALU_2_IN_expected_prev[18] !== 1'bx ) && ( ALU_2_IN_prev[18] !== ALU_2_IN_expected_prev[18] )
		&& ((ALU_2_IN_expected_prev[18] !== last_ALU_2_IN_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[18] = ALU_2_IN_expected_prev[18];
	end
	if (
		( ALU_2_IN_expected_prev[19] !== 1'bx ) && ( ALU_2_IN_prev[19] !== ALU_2_IN_expected_prev[19] )
		&& ((ALU_2_IN_expected_prev[19] !== last_ALU_2_IN_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[19] = ALU_2_IN_expected_prev[19];
	end
	if (
		( ALU_2_IN_expected_prev[20] !== 1'bx ) && ( ALU_2_IN_prev[20] !== ALU_2_IN_expected_prev[20] )
		&& ((ALU_2_IN_expected_prev[20] !== last_ALU_2_IN_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[20] = ALU_2_IN_expected_prev[20];
	end
	if (
		( ALU_2_IN_expected_prev[21] !== 1'bx ) && ( ALU_2_IN_prev[21] !== ALU_2_IN_expected_prev[21] )
		&& ((ALU_2_IN_expected_prev[21] !== last_ALU_2_IN_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[21] = ALU_2_IN_expected_prev[21];
	end
	if (
		( ALU_2_IN_expected_prev[22] !== 1'bx ) && ( ALU_2_IN_prev[22] !== ALU_2_IN_expected_prev[22] )
		&& ((ALU_2_IN_expected_prev[22] !== last_ALU_2_IN_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[22] = ALU_2_IN_expected_prev[22];
	end
	if (
		( ALU_2_IN_expected_prev[23] !== 1'bx ) && ( ALU_2_IN_prev[23] !== ALU_2_IN_expected_prev[23] )
		&& ((ALU_2_IN_expected_prev[23] !== last_ALU_2_IN_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[23] = ALU_2_IN_expected_prev[23];
	end
	if (
		( ALU_2_IN_expected_prev[24] !== 1'bx ) && ( ALU_2_IN_prev[24] !== ALU_2_IN_expected_prev[24] )
		&& ((ALU_2_IN_expected_prev[24] !== last_ALU_2_IN_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[24] = ALU_2_IN_expected_prev[24];
	end
	if (
		( ALU_2_IN_expected_prev[25] !== 1'bx ) && ( ALU_2_IN_prev[25] !== ALU_2_IN_expected_prev[25] )
		&& ((ALU_2_IN_expected_prev[25] !== last_ALU_2_IN_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[25] = ALU_2_IN_expected_prev[25];
	end
	if (
		( ALU_2_IN_expected_prev[26] !== 1'bx ) && ( ALU_2_IN_prev[26] !== ALU_2_IN_expected_prev[26] )
		&& ((ALU_2_IN_expected_prev[26] !== last_ALU_2_IN_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[26] = ALU_2_IN_expected_prev[26];
	end
	if (
		( ALU_2_IN_expected_prev[27] !== 1'bx ) && ( ALU_2_IN_prev[27] !== ALU_2_IN_expected_prev[27] )
		&& ((ALU_2_IN_expected_prev[27] !== last_ALU_2_IN_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[27] = ALU_2_IN_expected_prev[27];
	end
	if (
		( ALU_2_IN_expected_prev[28] !== 1'bx ) && ( ALU_2_IN_prev[28] !== ALU_2_IN_expected_prev[28] )
		&& ((ALU_2_IN_expected_prev[28] !== last_ALU_2_IN_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[28] = ALU_2_IN_expected_prev[28];
	end
	if (
		( ALU_2_IN_expected_prev[29] !== 1'bx ) && ( ALU_2_IN_prev[29] !== ALU_2_IN_expected_prev[29] )
		&& ((ALU_2_IN_expected_prev[29] !== last_ALU_2_IN_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[29] = ALU_2_IN_expected_prev[29];
	end
	if (
		( ALU_2_IN_expected_prev[30] !== 1'bx ) && ( ALU_2_IN_prev[30] !== ALU_2_IN_expected_prev[30] )
		&& ((ALU_2_IN_expected_prev[30] !== last_ALU_2_IN_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[30] = ALU_2_IN_expected_prev[30];
	end
	if (
		( ALU_2_IN_expected_prev[31] !== 1'bx ) && ( ALU_2_IN_prev[31] !== ALU_2_IN_expected_prev[31] )
		&& ((ALU_2_IN_expected_prev[31] !== last_ALU_2_IN_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_IN[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_IN_expected_prev);
		$display ("     Real value = %b", ALU_2_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_2_IN_exp[31] = ALU_2_IN_expected_prev[31];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[0] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[0] !== ALU_INSTANT_OUT_expected_prev[0] )
		&& ((ALU_INSTANT_OUT_expected_prev[0] !== last_ALU_INSTANT_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[0] = ALU_INSTANT_OUT_expected_prev[0];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[1] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[1] !== ALU_INSTANT_OUT_expected_prev[1] )
		&& ((ALU_INSTANT_OUT_expected_prev[1] !== last_ALU_INSTANT_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[1] = ALU_INSTANT_OUT_expected_prev[1];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[2] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[2] !== ALU_INSTANT_OUT_expected_prev[2] )
		&& ((ALU_INSTANT_OUT_expected_prev[2] !== last_ALU_INSTANT_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[2] = ALU_INSTANT_OUT_expected_prev[2];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[3] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[3] !== ALU_INSTANT_OUT_expected_prev[3] )
		&& ((ALU_INSTANT_OUT_expected_prev[3] !== last_ALU_INSTANT_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[3] = ALU_INSTANT_OUT_expected_prev[3];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[4] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[4] !== ALU_INSTANT_OUT_expected_prev[4] )
		&& ((ALU_INSTANT_OUT_expected_prev[4] !== last_ALU_INSTANT_OUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[4] = ALU_INSTANT_OUT_expected_prev[4];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[5] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[5] !== ALU_INSTANT_OUT_expected_prev[5] )
		&& ((ALU_INSTANT_OUT_expected_prev[5] !== last_ALU_INSTANT_OUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[5] = ALU_INSTANT_OUT_expected_prev[5];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[6] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[6] !== ALU_INSTANT_OUT_expected_prev[6] )
		&& ((ALU_INSTANT_OUT_expected_prev[6] !== last_ALU_INSTANT_OUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[6] = ALU_INSTANT_OUT_expected_prev[6];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[7] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[7] !== ALU_INSTANT_OUT_expected_prev[7] )
		&& ((ALU_INSTANT_OUT_expected_prev[7] !== last_ALU_INSTANT_OUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[7] = ALU_INSTANT_OUT_expected_prev[7];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[8] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[8] !== ALU_INSTANT_OUT_expected_prev[8] )
		&& ((ALU_INSTANT_OUT_expected_prev[8] !== last_ALU_INSTANT_OUT_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[8] = ALU_INSTANT_OUT_expected_prev[8];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[9] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[9] !== ALU_INSTANT_OUT_expected_prev[9] )
		&& ((ALU_INSTANT_OUT_expected_prev[9] !== last_ALU_INSTANT_OUT_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[9] = ALU_INSTANT_OUT_expected_prev[9];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[10] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[10] !== ALU_INSTANT_OUT_expected_prev[10] )
		&& ((ALU_INSTANT_OUT_expected_prev[10] !== last_ALU_INSTANT_OUT_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[10] = ALU_INSTANT_OUT_expected_prev[10];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[11] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[11] !== ALU_INSTANT_OUT_expected_prev[11] )
		&& ((ALU_INSTANT_OUT_expected_prev[11] !== last_ALU_INSTANT_OUT_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[11] = ALU_INSTANT_OUT_expected_prev[11];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[12] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[12] !== ALU_INSTANT_OUT_expected_prev[12] )
		&& ((ALU_INSTANT_OUT_expected_prev[12] !== last_ALU_INSTANT_OUT_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[12] = ALU_INSTANT_OUT_expected_prev[12];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[13] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[13] !== ALU_INSTANT_OUT_expected_prev[13] )
		&& ((ALU_INSTANT_OUT_expected_prev[13] !== last_ALU_INSTANT_OUT_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[13] = ALU_INSTANT_OUT_expected_prev[13];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[14] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[14] !== ALU_INSTANT_OUT_expected_prev[14] )
		&& ((ALU_INSTANT_OUT_expected_prev[14] !== last_ALU_INSTANT_OUT_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[14] = ALU_INSTANT_OUT_expected_prev[14];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[15] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[15] !== ALU_INSTANT_OUT_expected_prev[15] )
		&& ((ALU_INSTANT_OUT_expected_prev[15] !== last_ALU_INSTANT_OUT_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[15] = ALU_INSTANT_OUT_expected_prev[15];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[16] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[16] !== ALU_INSTANT_OUT_expected_prev[16] )
		&& ((ALU_INSTANT_OUT_expected_prev[16] !== last_ALU_INSTANT_OUT_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[16] = ALU_INSTANT_OUT_expected_prev[16];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[17] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[17] !== ALU_INSTANT_OUT_expected_prev[17] )
		&& ((ALU_INSTANT_OUT_expected_prev[17] !== last_ALU_INSTANT_OUT_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[17] = ALU_INSTANT_OUT_expected_prev[17];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[18] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[18] !== ALU_INSTANT_OUT_expected_prev[18] )
		&& ((ALU_INSTANT_OUT_expected_prev[18] !== last_ALU_INSTANT_OUT_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[18] = ALU_INSTANT_OUT_expected_prev[18];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[19] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[19] !== ALU_INSTANT_OUT_expected_prev[19] )
		&& ((ALU_INSTANT_OUT_expected_prev[19] !== last_ALU_INSTANT_OUT_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[19] = ALU_INSTANT_OUT_expected_prev[19];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[20] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[20] !== ALU_INSTANT_OUT_expected_prev[20] )
		&& ((ALU_INSTANT_OUT_expected_prev[20] !== last_ALU_INSTANT_OUT_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[20] = ALU_INSTANT_OUT_expected_prev[20];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[21] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[21] !== ALU_INSTANT_OUT_expected_prev[21] )
		&& ((ALU_INSTANT_OUT_expected_prev[21] !== last_ALU_INSTANT_OUT_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[21] = ALU_INSTANT_OUT_expected_prev[21];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[22] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[22] !== ALU_INSTANT_OUT_expected_prev[22] )
		&& ((ALU_INSTANT_OUT_expected_prev[22] !== last_ALU_INSTANT_OUT_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[22] = ALU_INSTANT_OUT_expected_prev[22];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[23] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[23] !== ALU_INSTANT_OUT_expected_prev[23] )
		&& ((ALU_INSTANT_OUT_expected_prev[23] !== last_ALU_INSTANT_OUT_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[23] = ALU_INSTANT_OUT_expected_prev[23];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[24] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[24] !== ALU_INSTANT_OUT_expected_prev[24] )
		&& ((ALU_INSTANT_OUT_expected_prev[24] !== last_ALU_INSTANT_OUT_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[24] = ALU_INSTANT_OUT_expected_prev[24];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[25] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[25] !== ALU_INSTANT_OUT_expected_prev[25] )
		&& ((ALU_INSTANT_OUT_expected_prev[25] !== last_ALU_INSTANT_OUT_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[25] = ALU_INSTANT_OUT_expected_prev[25];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[26] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[26] !== ALU_INSTANT_OUT_expected_prev[26] )
		&& ((ALU_INSTANT_OUT_expected_prev[26] !== last_ALU_INSTANT_OUT_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[26] = ALU_INSTANT_OUT_expected_prev[26];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[27] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[27] !== ALU_INSTANT_OUT_expected_prev[27] )
		&& ((ALU_INSTANT_OUT_expected_prev[27] !== last_ALU_INSTANT_OUT_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[27] = ALU_INSTANT_OUT_expected_prev[27];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[28] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[28] !== ALU_INSTANT_OUT_expected_prev[28] )
		&& ((ALU_INSTANT_OUT_expected_prev[28] !== last_ALU_INSTANT_OUT_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[28] = ALU_INSTANT_OUT_expected_prev[28];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[29] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[29] !== ALU_INSTANT_OUT_expected_prev[29] )
		&& ((ALU_INSTANT_OUT_expected_prev[29] !== last_ALU_INSTANT_OUT_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[29] = ALU_INSTANT_OUT_expected_prev[29];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[30] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[30] !== ALU_INSTANT_OUT_expected_prev[30] )
		&& ((ALU_INSTANT_OUT_expected_prev[30] !== last_ALU_INSTANT_OUT_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[30] = ALU_INSTANT_OUT_expected_prev[30];
	end
	if (
		( ALU_INSTANT_OUT_expected_prev[31] !== 1'bx ) && ( ALU_INSTANT_OUT_prev[31] !== ALU_INSTANT_OUT_expected_prev[31] )
		&& ((ALU_INSTANT_OUT_expected_prev[31] !== last_ALU_INSTANT_OUT_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_INSTANT_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_INSTANT_OUT_expected_prev);
		$display ("     Real value = %b", ALU_INSTANT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_INSTANT_OUT_exp[31] = ALU_INSTANT_OUT_expected_prev[31];
	end
	if (
		( ALU_OPCODE_expected_prev[0] !== 1'bx ) && ( ALU_OPCODE_prev[0] !== ALU_OPCODE_expected_prev[0] )
		&& ((ALU_OPCODE_expected_prev[0] !== last_ALU_OPCODE_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPCODE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPCODE_expected_prev);
		$display ("     Real value = %b", ALU_OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALU_OPCODE_exp[0] = ALU_OPCODE_expected_prev[0];
	end
	if (
		( ALU_OPCODE_expected_prev[1] !== 1'bx ) && ( ALU_OPCODE_prev[1] !== ALU_OPCODE_expected_prev[1] )
		&& ((ALU_OPCODE_expected_prev[1] !== last_ALU_OPCODE_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPCODE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPCODE_expected_prev);
		$display ("     Real value = %b", ALU_OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALU_OPCODE_exp[1] = ALU_OPCODE_expected_prev[1];
	end
	if (
		( ALU_OPCODE_expected_prev[2] !== 1'bx ) && ( ALU_OPCODE_prev[2] !== ALU_OPCODE_expected_prev[2] )
		&& ((ALU_OPCODE_expected_prev[2] !== last_ALU_OPCODE_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPCODE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPCODE_expected_prev);
		$display ("     Real value = %b", ALU_OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALU_OPCODE_exp[2] = ALU_OPCODE_expected_prev[2];
	end
	if (
		( ALU_OPCODE_expected_prev[3] !== 1'bx ) && ( ALU_OPCODE_prev[3] !== ALU_OPCODE_expected_prev[3] )
		&& ((ALU_OPCODE_expected_prev[3] !== last_ALU_OPCODE_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPCODE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPCODE_expected_prev);
		$display ("     Real value = %b", ALU_OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALU_OPCODE_exp[3] = ALU_OPCODE_expected_prev[3];
	end
	if (
		( do_update_expected_prev !== 1'bx ) && ( do_update_prev !== do_update_expected_prev )
		&& ((do_update_expected_prev !== last_do_update_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port do_update :: @time = %t",  $realtime);
		$display ("     Expected value = %b", do_update_expected_prev);
		$display ("     Real value = %b", do_update_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_do_update_exp = do_update_expected_prev;
	end
	if (
		( eq_expected_prev !== 1'bx ) && ( eq_prev !== eq_expected_prev )
		&& ((eq_expected_prev !== last_eq_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq_expected_prev);
		$display ("     Real value = %b", eq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_eq_exp = eq_expected_prev;
	end
	if (
		( inst_cache_en_expected_prev !== 1'bx ) && ( inst_cache_en_prev !== inst_cache_en_expected_prev )
		&& ((inst_cache_en_expected_prev !== last_inst_cache_en_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_cache_en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_cache_en_expected_prev);
		$display ("     Real value = %b", inst_cache_en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_inst_cache_en_exp = inst_cache_en_expected_prev;
	end
	if (
		( instr_expected_prev[0] !== 1'bx ) && ( instr_prev[0] !== instr_expected_prev[0] )
		&& ((instr_expected_prev[0] !== last_instr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[0] = instr_expected_prev[0];
	end
	if (
		( instr_expected_prev[1] !== 1'bx ) && ( instr_prev[1] !== instr_expected_prev[1] )
		&& ((instr_expected_prev[1] !== last_instr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[1] = instr_expected_prev[1];
	end
	if (
		( instr_expected_prev[2] !== 1'bx ) && ( instr_prev[2] !== instr_expected_prev[2] )
		&& ((instr_expected_prev[2] !== last_instr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[2] = instr_expected_prev[2];
	end
	if (
		( instr_expected_prev[3] !== 1'bx ) && ( instr_prev[3] !== instr_expected_prev[3] )
		&& ((instr_expected_prev[3] !== last_instr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[3] = instr_expected_prev[3];
	end
	if (
		( instr_expected_prev[4] !== 1'bx ) && ( instr_prev[4] !== instr_expected_prev[4] )
		&& ((instr_expected_prev[4] !== last_instr_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[4] = instr_expected_prev[4];
	end
	if (
		( instr_expected_prev[5] !== 1'bx ) && ( instr_prev[5] !== instr_expected_prev[5] )
		&& ((instr_expected_prev[5] !== last_instr_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[5] = instr_expected_prev[5];
	end
	if (
		( instr_expected_prev[6] !== 1'bx ) && ( instr_prev[6] !== instr_expected_prev[6] )
		&& ((instr_expected_prev[6] !== last_instr_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[6] = instr_expected_prev[6];
	end
	if (
		( instr_expected_prev[7] !== 1'bx ) && ( instr_prev[7] !== instr_expected_prev[7] )
		&& ((instr_expected_prev[7] !== last_instr_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[7] = instr_expected_prev[7];
	end
	if (
		( instr_expected_prev[8] !== 1'bx ) && ( instr_prev[8] !== instr_expected_prev[8] )
		&& ((instr_expected_prev[8] !== last_instr_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[8] = instr_expected_prev[8];
	end
	if (
		( instr_expected_prev[9] !== 1'bx ) && ( instr_prev[9] !== instr_expected_prev[9] )
		&& ((instr_expected_prev[9] !== last_instr_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[9] = instr_expected_prev[9];
	end
	if (
		( instr_expected_prev[10] !== 1'bx ) && ( instr_prev[10] !== instr_expected_prev[10] )
		&& ((instr_expected_prev[10] !== last_instr_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[10] = instr_expected_prev[10];
	end
	if (
		( instr_expected_prev[11] !== 1'bx ) && ( instr_prev[11] !== instr_expected_prev[11] )
		&& ((instr_expected_prev[11] !== last_instr_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[11] = instr_expected_prev[11];
	end
	if (
		( instr_expected_prev[12] !== 1'bx ) && ( instr_prev[12] !== instr_expected_prev[12] )
		&& ((instr_expected_prev[12] !== last_instr_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[12] = instr_expected_prev[12];
	end
	if (
		( instr_expected_prev[13] !== 1'bx ) && ( instr_prev[13] !== instr_expected_prev[13] )
		&& ((instr_expected_prev[13] !== last_instr_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[13] = instr_expected_prev[13];
	end
	if (
		( instr_expected_prev[14] !== 1'bx ) && ( instr_prev[14] !== instr_expected_prev[14] )
		&& ((instr_expected_prev[14] !== last_instr_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[14] = instr_expected_prev[14];
	end
	if (
		( instr_expected_prev[15] !== 1'bx ) && ( instr_prev[15] !== instr_expected_prev[15] )
		&& ((instr_expected_prev[15] !== last_instr_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[15] = instr_expected_prev[15];
	end
	if (
		( instr_expected_prev[16] !== 1'bx ) && ( instr_prev[16] !== instr_expected_prev[16] )
		&& ((instr_expected_prev[16] !== last_instr_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[16] = instr_expected_prev[16];
	end
	if (
		( instr_expected_prev[17] !== 1'bx ) && ( instr_prev[17] !== instr_expected_prev[17] )
		&& ((instr_expected_prev[17] !== last_instr_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[17] = instr_expected_prev[17];
	end
	if (
		( instr_expected_prev[18] !== 1'bx ) && ( instr_prev[18] !== instr_expected_prev[18] )
		&& ((instr_expected_prev[18] !== last_instr_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[18] = instr_expected_prev[18];
	end
	if (
		( instr_expected_prev[19] !== 1'bx ) && ( instr_prev[19] !== instr_expected_prev[19] )
		&& ((instr_expected_prev[19] !== last_instr_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instr_exp[19] = instr_expected_prev[19];
	end
	if (
		( is_shamt_load_expected_prev !== 1'bx ) && ( is_shamt_load_prev !== is_shamt_load_expected_prev )
		&& ((is_shamt_load_expected_prev !== last_is_shamt_load_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port is_shamt_load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", is_shamt_load_expected_prev);
		$display ("     Real value = %b", is_shamt_load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_is_shamt_load_exp = is_shamt_load_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pc_expected_prev[8] !== 1'bx ) && ( pc_prev[8] !== pc_expected_prev[8] )
		&& ((pc_expected_prev[8] !== last_pc_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[8] = pc_expected_prev[8];
	end
	if (
		( pc_expected_prev[9] !== 1'bx ) && ( pc_prev[9] !== pc_expected_prev[9] )
		&& ((pc_expected_prev[9] !== last_pc_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[9] = pc_expected_prev[9];
	end
	if (
		( pc_expected_prev[10] !== 1'bx ) && ( pc_prev[10] !== pc_expected_prev[10] )
		&& ((pc_expected_prev[10] !== last_pc_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[10] = pc_expected_prev[10];
	end
	if (
		( pc_expected_prev[11] !== 1'bx ) && ( pc_prev[11] !== pc_expected_prev[11] )
		&& ((pc_expected_prev[11] !== last_pc_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[11] = pc_expected_prev[11];
	end
	if (
		( pc_expected_prev[12] !== 1'bx ) && ( pc_prev[12] !== pc_expected_prev[12] )
		&& ((pc_expected_prev[12] !== last_pc_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[12] = pc_expected_prev[12];
	end
	if (
		( pc_expected_prev[13] !== 1'bx ) && ( pc_prev[13] !== pc_expected_prev[13] )
		&& ((pc_expected_prev[13] !== last_pc_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[13] = pc_expected_prev[13];
	end
	if (
		( pc_expected_prev[14] !== 1'bx ) && ( pc_prev[14] !== pc_expected_prev[14] )
		&& ((pc_expected_prev[14] !== last_pc_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[14] = pc_expected_prev[14];
	end
	if (
		( pc_expected_prev[15] !== 1'bx ) && ( pc_prev[15] !== pc_expected_prev[15] )
		&& ((pc_expected_prev[15] !== last_pc_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[15] = pc_expected_prev[15];
	end
	if (
		( pc_expected_prev[16] !== 1'bx ) && ( pc_prev[16] !== pc_expected_prev[16] )
		&& ((pc_expected_prev[16] !== last_pc_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[16] = pc_expected_prev[16];
	end
	if (
		( pc_expected_prev[17] !== 1'bx ) && ( pc_prev[17] !== pc_expected_prev[17] )
		&& ((pc_expected_prev[17] !== last_pc_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[17] = pc_expected_prev[17];
	end
	if (
		( pc_expected_prev[18] !== 1'bx ) && ( pc_prev[18] !== pc_expected_prev[18] )
		&& ((pc_expected_prev[18] !== last_pc_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[18] = pc_expected_prev[18];
	end
	if (
		( pc_expected_prev[19] !== 1'bx ) && ( pc_prev[19] !== pc_expected_prev[19] )
		&& ((pc_expected_prev[19] !== last_pc_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[19] = pc_expected_prev[19];
	end
	if (
		( pc_expected_prev[20] !== 1'bx ) && ( pc_prev[20] !== pc_expected_prev[20] )
		&& ((pc_expected_prev[20] !== last_pc_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[20] = pc_expected_prev[20];
	end
	if (
		( pc_expected_prev[21] !== 1'bx ) && ( pc_prev[21] !== pc_expected_prev[21] )
		&& ((pc_expected_prev[21] !== last_pc_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[21] = pc_expected_prev[21];
	end
	if (
		( pc_expected_prev[22] !== 1'bx ) && ( pc_prev[22] !== pc_expected_prev[22] )
		&& ((pc_expected_prev[22] !== last_pc_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[22] = pc_expected_prev[22];
	end
	if (
		( pc_expected_prev[23] !== 1'bx ) && ( pc_prev[23] !== pc_expected_prev[23] )
		&& ((pc_expected_prev[23] !== last_pc_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[23] = pc_expected_prev[23];
	end
	if (
		( pc_expected_prev[24] !== 1'bx ) && ( pc_prev[24] !== pc_expected_prev[24] )
		&& ((pc_expected_prev[24] !== last_pc_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[24] = pc_expected_prev[24];
	end
	if (
		( pc_expected_prev[25] !== 1'bx ) && ( pc_prev[25] !== pc_expected_prev[25] )
		&& ((pc_expected_prev[25] !== last_pc_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[25] = pc_expected_prev[25];
	end
	if (
		( pc_expected_prev[26] !== 1'bx ) && ( pc_prev[26] !== pc_expected_prev[26] )
		&& ((pc_expected_prev[26] !== last_pc_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[26] = pc_expected_prev[26];
	end
	if (
		( pc_expected_prev[27] !== 1'bx ) && ( pc_prev[27] !== pc_expected_prev[27] )
		&& ((pc_expected_prev[27] !== last_pc_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[27] = pc_expected_prev[27];
	end
	if (
		( pc_expected_prev[28] !== 1'bx ) && ( pc_prev[28] !== pc_expected_prev[28] )
		&& ((pc_expected_prev[28] !== last_pc_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[28] = pc_expected_prev[28];
	end
	if (
		( pc_expected_prev[29] !== 1'bx ) && ( pc_prev[29] !== pc_expected_prev[29] )
		&& ((pc_expected_prev[29] !== last_pc_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[29] = pc_expected_prev[29];
	end
	if (
		( pc_expected_prev[30] !== 1'bx ) && ( pc_prev[30] !== pc_expected_prev[30] )
		&& ((pc_expected_prev[30] !== last_pc_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[30] = pc_expected_prev[30];
	end
	if (
		( pc_expected_prev[31] !== 1'bx ) && ( pc_prev[31] !== pc_expected_prev[31] )
		&& ((pc_expected_prev[31] !== last_pc_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pc_exp[31] = pc_expected_prev[31];
	end
	if (
		( ReadDataOne_expected_prev[0] !== 1'bx ) && ( ReadDataOne_prev[0] !== ReadDataOne_expected_prev[0] )
		&& ((ReadDataOne_expected_prev[0] !== last_ReadDataOne_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[0] = ReadDataOne_expected_prev[0];
	end
	if (
		( ReadDataOne_expected_prev[1] !== 1'bx ) && ( ReadDataOne_prev[1] !== ReadDataOne_expected_prev[1] )
		&& ((ReadDataOne_expected_prev[1] !== last_ReadDataOne_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[1] = ReadDataOne_expected_prev[1];
	end
	if (
		( ReadDataOne_expected_prev[2] !== 1'bx ) && ( ReadDataOne_prev[2] !== ReadDataOne_expected_prev[2] )
		&& ((ReadDataOne_expected_prev[2] !== last_ReadDataOne_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[2] = ReadDataOne_expected_prev[2];
	end
	if (
		( ReadDataOne_expected_prev[3] !== 1'bx ) && ( ReadDataOne_prev[3] !== ReadDataOne_expected_prev[3] )
		&& ((ReadDataOne_expected_prev[3] !== last_ReadDataOne_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[3] = ReadDataOne_expected_prev[3];
	end
	if (
		( ReadDataOne_expected_prev[4] !== 1'bx ) && ( ReadDataOne_prev[4] !== ReadDataOne_expected_prev[4] )
		&& ((ReadDataOne_expected_prev[4] !== last_ReadDataOne_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[4] = ReadDataOne_expected_prev[4];
	end
	if (
		( ReadDataOne_expected_prev[5] !== 1'bx ) && ( ReadDataOne_prev[5] !== ReadDataOne_expected_prev[5] )
		&& ((ReadDataOne_expected_prev[5] !== last_ReadDataOne_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[5] = ReadDataOne_expected_prev[5];
	end
	if (
		( ReadDataOne_expected_prev[6] !== 1'bx ) && ( ReadDataOne_prev[6] !== ReadDataOne_expected_prev[6] )
		&& ((ReadDataOne_expected_prev[6] !== last_ReadDataOne_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[6] = ReadDataOne_expected_prev[6];
	end
	if (
		( ReadDataOne_expected_prev[7] !== 1'bx ) && ( ReadDataOne_prev[7] !== ReadDataOne_expected_prev[7] )
		&& ((ReadDataOne_expected_prev[7] !== last_ReadDataOne_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[7] = ReadDataOne_expected_prev[7];
	end
	if (
		( ReadDataOne_expected_prev[8] !== 1'bx ) && ( ReadDataOne_prev[8] !== ReadDataOne_expected_prev[8] )
		&& ((ReadDataOne_expected_prev[8] !== last_ReadDataOne_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[8] = ReadDataOne_expected_prev[8];
	end
	if (
		( ReadDataOne_expected_prev[9] !== 1'bx ) && ( ReadDataOne_prev[9] !== ReadDataOne_expected_prev[9] )
		&& ((ReadDataOne_expected_prev[9] !== last_ReadDataOne_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[9] = ReadDataOne_expected_prev[9];
	end
	if (
		( ReadDataOne_expected_prev[10] !== 1'bx ) && ( ReadDataOne_prev[10] !== ReadDataOne_expected_prev[10] )
		&& ((ReadDataOne_expected_prev[10] !== last_ReadDataOne_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[10] = ReadDataOne_expected_prev[10];
	end
	if (
		( ReadDataOne_expected_prev[11] !== 1'bx ) && ( ReadDataOne_prev[11] !== ReadDataOne_expected_prev[11] )
		&& ((ReadDataOne_expected_prev[11] !== last_ReadDataOne_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[11] = ReadDataOne_expected_prev[11];
	end
	if (
		( ReadDataOne_expected_prev[12] !== 1'bx ) && ( ReadDataOne_prev[12] !== ReadDataOne_expected_prev[12] )
		&& ((ReadDataOne_expected_prev[12] !== last_ReadDataOne_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[12] = ReadDataOne_expected_prev[12];
	end
	if (
		( ReadDataOne_expected_prev[13] !== 1'bx ) && ( ReadDataOne_prev[13] !== ReadDataOne_expected_prev[13] )
		&& ((ReadDataOne_expected_prev[13] !== last_ReadDataOne_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[13] = ReadDataOne_expected_prev[13];
	end
	if (
		( ReadDataOne_expected_prev[14] !== 1'bx ) && ( ReadDataOne_prev[14] !== ReadDataOne_expected_prev[14] )
		&& ((ReadDataOne_expected_prev[14] !== last_ReadDataOne_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[14] = ReadDataOne_expected_prev[14];
	end
	if (
		( ReadDataOne_expected_prev[15] !== 1'bx ) && ( ReadDataOne_prev[15] !== ReadDataOne_expected_prev[15] )
		&& ((ReadDataOne_expected_prev[15] !== last_ReadDataOne_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[15] = ReadDataOne_expected_prev[15];
	end
	if (
		( ReadDataOne_expected_prev[16] !== 1'bx ) && ( ReadDataOne_prev[16] !== ReadDataOne_expected_prev[16] )
		&& ((ReadDataOne_expected_prev[16] !== last_ReadDataOne_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[16] = ReadDataOne_expected_prev[16];
	end
	if (
		( ReadDataOne_expected_prev[17] !== 1'bx ) && ( ReadDataOne_prev[17] !== ReadDataOne_expected_prev[17] )
		&& ((ReadDataOne_expected_prev[17] !== last_ReadDataOne_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[17] = ReadDataOne_expected_prev[17];
	end
	if (
		( ReadDataOne_expected_prev[18] !== 1'bx ) && ( ReadDataOne_prev[18] !== ReadDataOne_expected_prev[18] )
		&& ((ReadDataOne_expected_prev[18] !== last_ReadDataOne_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[18] = ReadDataOne_expected_prev[18];
	end
	if (
		( ReadDataOne_expected_prev[19] !== 1'bx ) && ( ReadDataOne_prev[19] !== ReadDataOne_expected_prev[19] )
		&& ((ReadDataOne_expected_prev[19] !== last_ReadDataOne_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[19] = ReadDataOne_expected_prev[19];
	end
	if (
		( ReadDataOne_expected_prev[20] !== 1'bx ) && ( ReadDataOne_prev[20] !== ReadDataOne_expected_prev[20] )
		&& ((ReadDataOne_expected_prev[20] !== last_ReadDataOne_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[20] = ReadDataOne_expected_prev[20];
	end
	if (
		( ReadDataOne_expected_prev[21] !== 1'bx ) && ( ReadDataOne_prev[21] !== ReadDataOne_expected_prev[21] )
		&& ((ReadDataOne_expected_prev[21] !== last_ReadDataOne_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[21] = ReadDataOne_expected_prev[21];
	end
	if (
		( ReadDataOne_expected_prev[22] !== 1'bx ) && ( ReadDataOne_prev[22] !== ReadDataOne_expected_prev[22] )
		&& ((ReadDataOne_expected_prev[22] !== last_ReadDataOne_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[22] = ReadDataOne_expected_prev[22];
	end
	if (
		( ReadDataOne_expected_prev[23] !== 1'bx ) && ( ReadDataOne_prev[23] !== ReadDataOne_expected_prev[23] )
		&& ((ReadDataOne_expected_prev[23] !== last_ReadDataOne_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[23] = ReadDataOne_expected_prev[23];
	end
	if (
		( ReadDataOne_expected_prev[24] !== 1'bx ) && ( ReadDataOne_prev[24] !== ReadDataOne_expected_prev[24] )
		&& ((ReadDataOne_expected_prev[24] !== last_ReadDataOne_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[24] = ReadDataOne_expected_prev[24];
	end
	if (
		( ReadDataOne_expected_prev[25] !== 1'bx ) && ( ReadDataOne_prev[25] !== ReadDataOne_expected_prev[25] )
		&& ((ReadDataOne_expected_prev[25] !== last_ReadDataOne_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[25] = ReadDataOne_expected_prev[25];
	end
	if (
		( ReadDataOne_expected_prev[26] !== 1'bx ) && ( ReadDataOne_prev[26] !== ReadDataOne_expected_prev[26] )
		&& ((ReadDataOne_expected_prev[26] !== last_ReadDataOne_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[26] = ReadDataOne_expected_prev[26];
	end
	if (
		( ReadDataOne_expected_prev[27] !== 1'bx ) && ( ReadDataOne_prev[27] !== ReadDataOne_expected_prev[27] )
		&& ((ReadDataOne_expected_prev[27] !== last_ReadDataOne_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[27] = ReadDataOne_expected_prev[27];
	end
	if (
		( ReadDataOne_expected_prev[28] !== 1'bx ) && ( ReadDataOne_prev[28] !== ReadDataOne_expected_prev[28] )
		&& ((ReadDataOne_expected_prev[28] !== last_ReadDataOne_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[28] = ReadDataOne_expected_prev[28];
	end
	if (
		( ReadDataOne_expected_prev[29] !== 1'bx ) && ( ReadDataOne_prev[29] !== ReadDataOne_expected_prev[29] )
		&& ((ReadDataOne_expected_prev[29] !== last_ReadDataOne_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[29] = ReadDataOne_expected_prev[29];
	end
	if (
		( ReadDataOne_expected_prev[30] !== 1'bx ) && ( ReadDataOne_prev[30] !== ReadDataOne_expected_prev[30] )
		&& ((ReadDataOne_expected_prev[30] !== last_ReadDataOne_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[30] = ReadDataOne_expected_prev[30];
	end
	if (
		( ReadDataOne_expected_prev[31] !== 1'bx ) && ( ReadDataOne_prev[31] !== ReadDataOne_expected_prev[31] )
		&& ((ReadDataOne_expected_prev[31] !== last_ReadDataOne_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataOne[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataOne_expected_prev);
		$display ("     Real value = %b", ReadDataOne_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ReadDataOne_exp[31] = ReadDataOne_expected_prev[31];
	end
	if (
		( ReadDataTwo_expected_prev[0] !== 1'bx ) && ( ReadDataTwo_prev[0] !== ReadDataTwo_expected_prev[0] )
		&& ((ReadDataTwo_expected_prev[0] !== last_ReadDataTwo_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[0] = ReadDataTwo_expected_prev[0];
	end
	if (
		( ReadDataTwo_expected_prev[1] !== 1'bx ) && ( ReadDataTwo_prev[1] !== ReadDataTwo_expected_prev[1] )
		&& ((ReadDataTwo_expected_prev[1] !== last_ReadDataTwo_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[1] = ReadDataTwo_expected_prev[1];
	end
	if (
		( ReadDataTwo_expected_prev[2] !== 1'bx ) && ( ReadDataTwo_prev[2] !== ReadDataTwo_expected_prev[2] )
		&& ((ReadDataTwo_expected_prev[2] !== last_ReadDataTwo_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[2] = ReadDataTwo_expected_prev[2];
	end
	if (
		( ReadDataTwo_expected_prev[3] !== 1'bx ) && ( ReadDataTwo_prev[3] !== ReadDataTwo_expected_prev[3] )
		&& ((ReadDataTwo_expected_prev[3] !== last_ReadDataTwo_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[3] = ReadDataTwo_expected_prev[3];
	end
	if (
		( ReadDataTwo_expected_prev[4] !== 1'bx ) && ( ReadDataTwo_prev[4] !== ReadDataTwo_expected_prev[4] )
		&& ((ReadDataTwo_expected_prev[4] !== last_ReadDataTwo_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[4] = ReadDataTwo_expected_prev[4];
	end
	if (
		( ReadDataTwo_expected_prev[5] !== 1'bx ) && ( ReadDataTwo_prev[5] !== ReadDataTwo_expected_prev[5] )
		&& ((ReadDataTwo_expected_prev[5] !== last_ReadDataTwo_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[5] = ReadDataTwo_expected_prev[5];
	end
	if (
		( ReadDataTwo_expected_prev[6] !== 1'bx ) && ( ReadDataTwo_prev[6] !== ReadDataTwo_expected_prev[6] )
		&& ((ReadDataTwo_expected_prev[6] !== last_ReadDataTwo_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[6] = ReadDataTwo_expected_prev[6];
	end
	if (
		( ReadDataTwo_expected_prev[7] !== 1'bx ) && ( ReadDataTwo_prev[7] !== ReadDataTwo_expected_prev[7] )
		&& ((ReadDataTwo_expected_prev[7] !== last_ReadDataTwo_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[7] = ReadDataTwo_expected_prev[7];
	end
	if (
		( ReadDataTwo_expected_prev[8] !== 1'bx ) && ( ReadDataTwo_prev[8] !== ReadDataTwo_expected_prev[8] )
		&& ((ReadDataTwo_expected_prev[8] !== last_ReadDataTwo_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[8] = ReadDataTwo_expected_prev[8];
	end
	if (
		( ReadDataTwo_expected_prev[9] !== 1'bx ) && ( ReadDataTwo_prev[9] !== ReadDataTwo_expected_prev[9] )
		&& ((ReadDataTwo_expected_prev[9] !== last_ReadDataTwo_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[9] = ReadDataTwo_expected_prev[9];
	end
	if (
		( ReadDataTwo_expected_prev[10] !== 1'bx ) && ( ReadDataTwo_prev[10] !== ReadDataTwo_expected_prev[10] )
		&& ((ReadDataTwo_expected_prev[10] !== last_ReadDataTwo_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[10] = ReadDataTwo_expected_prev[10];
	end
	if (
		( ReadDataTwo_expected_prev[11] !== 1'bx ) && ( ReadDataTwo_prev[11] !== ReadDataTwo_expected_prev[11] )
		&& ((ReadDataTwo_expected_prev[11] !== last_ReadDataTwo_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[11] = ReadDataTwo_expected_prev[11];
	end
	if (
		( ReadDataTwo_expected_prev[12] !== 1'bx ) && ( ReadDataTwo_prev[12] !== ReadDataTwo_expected_prev[12] )
		&& ((ReadDataTwo_expected_prev[12] !== last_ReadDataTwo_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[12] = ReadDataTwo_expected_prev[12];
	end
	if (
		( ReadDataTwo_expected_prev[13] !== 1'bx ) && ( ReadDataTwo_prev[13] !== ReadDataTwo_expected_prev[13] )
		&& ((ReadDataTwo_expected_prev[13] !== last_ReadDataTwo_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[13] = ReadDataTwo_expected_prev[13];
	end
	if (
		( ReadDataTwo_expected_prev[14] !== 1'bx ) && ( ReadDataTwo_prev[14] !== ReadDataTwo_expected_prev[14] )
		&& ((ReadDataTwo_expected_prev[14] !== last_ReadDataTwo_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[14] = ReadDataTwo_expected_prev[14];
	end
	if (
		( ReadDataTwo_expected_prev[15] !== 1'bx ) && ( ReadDataTwo_prev[15] !== ReadDataTwo_expected_prev[15] )
		&& ((ReadDataTwo_expected_prev[15] !== last_ReadDataTwo_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[15] = ReadDataTwo_expected_prev[15];
	end
	if (
		( ReadDataTwo_expected_prev[16] !== 1'bx ) && ( ReadDataTwo_prev[16] !== ReadDataTwo_expected_prev[16] )
		&& ((ReadDataTwo_expected_prev[16] !== last_ReadDataTwo_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[16] = ReadDataTwo_expected_prev[16];
	end
	if (
		( ReadDataTwo_expected_prev[17] !== 1'bx ) && ( ReadDataTwo_prev[17] !== ReadDataTwo_expected_prev[17] )
		&& ((ReadDataTwo_expected_prev[17] !== last_ReadDataTwo_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[17] = ReadDataTwo_expected_prev[17];
	end
	if (
		( ReadDataTwo_expected_prev[18] !== 1'bx ) && ( ReadDataTwo_prev[18] !== ReadDataTwo_expected_prev[18] )
		&& ((ReadDataTwo_expected_prev[18] !== last_ReadDataTwo_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[18] = ReadDataTwo_expected_prev[18];
	end
	if (
		( ReadDataTwo_expected_prev[19] !== 1'bx ) && ( ReadDataTwo_prev[19] !== ReadDataTwo_expected_prev[19] )
		&& ((ReadDataTwo_expected_prev[19] !== last_ReadDataTwo_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[19] = ReadDataTwo_expected_prev[19];
	end
	if (
		( ReadDataTwo_expected_prev[20] !== 1'bx ) && ( ReadDataTwo_prev[20] !== ReadDataTwo_expected_prev[20] )
		&& ((ReadDataTwo_expected_prev[20] !== last_ReadDataTwo_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[20] = ReadDataTwo_expected_prev[20];
	end
	if (
		( ReadDataTwo_expected_prev[21] !== 1'bx ) && ( ReadDataTwo_prev[21] !== ReadDataTwo_expected_prev[21] )
		&& ((ReadDataTwo_expected_prev[21] !== last_ReadDataTwo_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[21] = ReadDataTwo_expected_prev[21];
	end
	if (
		( ReadDataTwo_expected_prev[22] !== 1'bx ) && ( ReadDataTwo_prev[22] !== ReadDataTwo_expected_prev[22] )
		&& ((ReadDataTwo_expected_prev[22] !== last_ReadDataTwo_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[22] = ReadDataTwo_expected_prev[22];
	end
	if (
		( ReadDataTwo_expected_prev[23] !== 1'bx ) && ( ReadDataTwo_prev[23] !== ReadDataTwo_expected_prev[23] )
		&& ((ReadDataTwo_expected_prev[23] !== last_ReadDataTwo_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[23] = ReadDataTwo_expected_prev[23];
	end
	if (
		( ReadDataTwo_expected_prev[24] !== 1'bx ) && ( ReadDataTwo_prev[24] !== ReadDataTwo_expected_prev[24] )
		&& ((ReadDataTwo_expected_prev[24] !== last_ReadDataTwo_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[24] = ReadDataTwo_expected_prev[24];
	end
	if (
		( ReadDataTwo_expected_prev[25] !== 1'bx ) && ( ReadDataTwo_prev[25] !== ReadDataTwo_expected_prev[25] )
		&& ((ReadDataTwo_expected_prev[25] !== last_ReadDataTwo_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[25] = ReadDataTwo_expected_prev[25];
	end
	if (
		( ReadDataTwo_expected_prev[26] !== 1'bx ) && ( ReadDataTwo_prev[26] !== ReadDataTwo_expected_prev[26] )
		&& ((ReadDataTwo_expected_prev[26] !== last_ReadDataTwo_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[26] = ReadDataTwo_expected_prev[26];
	end
	if (
		( ReadDataTwo_expected_prev[27] !== 1'bx ) && ( ReadDataTwo_prev[27] !== ReadDataTwo_expected_prev[27] )
		&& ((ReadDataTwo_expected_prev[27] !== last_ReadDataTwo_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[27] = ReadDataTwo_expected_prev[27];
	end
	if (
		( ReadDataTwo_expected_prev[28] !== 1'bx ) && ( ReadDataTwo_prev[28] !== ReadDataTwo_expected_prev[28] )
		&& ((ReadDataTwo_expected_prev[28] !== last_ReadDataTwo_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[28] = ReadDataTwo_expected_prev[28];
	end
	if (
		( ReadDataTwo_expected_prev[29] !== 1'bx ) && ( ReadDataTwo_prev[29] !== ReadDataTwo_expected_prev[29] )
		&& ((ReadDataTwo_expected_prev[29] !== last_ReadDataTwo_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[29] = ReadDataTwo_expected_prev[29];
	end
	if (
		( ReadDataTwo_expected_prev[30] !== 1'bx ) && ( ReadDataTwo_prev[30] !== ReadDataTwo_expected_prev[30] )
		&& ((ReadDataTwo_expected_prev[30] !== last_ReadDataTwo_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[30] = ReadDataTwo_expected_prev[30];
	end
	if (
		( ReadDataTwo_expected_prev[31] !== 1'bx ) && ( ReadDataTwo_prev[31] !== ReadDataTwo_expected_prev[31] )
		&& ((ReadDataTwo_expected_prev[31] !== last_ReadDataTwo_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataTwo[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataTwo_expected_prev);
		$display ("     Real value = %b", ReadDataTwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadDataTwo_exp[31] = ReadDataTwo_expected_prev[31];
	end
	if (
		( reg_write_expected_prev !== 1'bx ) && ( reg_write_prev !== reg_write_expected_prev )
		&& ((reg_write_expected_prev !== last_reg_write_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_write_expected_prev);
		$display ("     Real value = %b", reg_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_reg_write_exp = reg_write_expected_prev;
	end
	if (
		( sgn_expected_prev !== 1'bx ) && ( sgn_prev !== sgn_expected_prev )
		&& ((sgn_expected_prev !== last_sgn_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sgn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sgn_expected_prev);
		$display ("     Real value = %b", sgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_sgn_exp = sgn_expected_prev;
	end
	if (
		( write_date_expected_prev[0] !== 1'bx ) && ( write_date_prev[0] !== write_date_expected_prev[0] )
		&& ((write_date_expected_prev[0] !== last_write_date_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[0] = write_date_expected_prev[0];
	end
	if (
		( write_date_expected_prev[1] !== 1'bx ) && ( write_date_prev[1] !== write_date_expected_prev[1] )
		&& ((write_date_expected_prev[1] !== last_write_date_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[1] = write_date_expected_prev[1];
	end
	if (
		( write_date_expected_prev[2] !== 1'bx ) && ( write_date_prev[2] !== write_date_expected_prev[2] )
		&& ((write_date_expected_prev[2] !== last_write_date_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[2] = write_date_expected_prev[2];
	end
	if (
		( write_date_expected_prev[3] !== 1'bx ) && ( write_date_prev[3] !== write_date_expected_prev[3] )
		&& ((write_date_expected_prev[3] !== last_write_date_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[3] = write_date_expected_prev[3];
	end
	if (
		( write_date_expected_prev[4] !== 1'bx ) && ( write_date_prev[4] !== write_date_expected_prev[4] )
		&& ((write_date_expected_prev[4] !== last_write_date_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[4] = write_date_expected_prev[4];
	end
	if (
		( write_date_expected_prev[5] !== 1'bx ) && ( write_date_prev[5] !== write_date_expected_prev[5] )
		&& ((write_date_expected_prev[5] !== last_write_date_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[5] = write_date_expected_prev[5];
	end
	if (
		( write_date_expected_prev[6] !== 1'bx ) && ( write_date_prev[6] !== write_date_expected_prev[6] )
		&& ((write_date_expected_prev[6] !== last_write_date_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[6] = write_date_expected_prev[6];
	end
	if (
		( write_date_expected_prev[7] !== 1'bx ) && ( write_date_prev[7] !== write_date_expected_prev[7] )
		&& ((write_date_expected_prev[7] !== last_write_date_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[7] = write_date_expected_prev[7];
	end
	if (
		( write_date_expected_prev[8] !== 1'bx ) && ( write_date_prev[8] !== write_date_expected_prev[8] )
		&& ((write_date_expected_prev[8] !== last_write_date_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[8] = write_date_expected_prev[8];
	end
	if (
		( write_date_expected_prev[9] !== 1'bx ) && ( write_date_prev[9] !== write_date_expected_prev[9] )
		&& ((write_date_expected_prev[9] !== last_write_date_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[9] = write_date_expected_prev[9];
	end
	if (
		( write_date_expected_prev[10] !== 1'bx ) && ( write_date_prev[10] !== write_date_expected_prev[10] )
		&& ((write_date_expected_prev[10] !== last_write_date_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[10] = write_date_expected_prev[10];
	end
	if (
		( write_date_expected_prev[11] !== 1'bx ) && ( write_date_prev[11] !== write_date_expected_prev[11] )
		&& ((write_date_expected_prev[11] !== last_write_date_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[11] = write_date_expected_prev[11];
	end
	if (
		( write_date_expected_prev[12] !== 1'bx ) && ( write_date_prev[12] !== write_date_expected_prev[12] )
		&& ((write_date_expected_prev[12] !== last_write_date_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[12] = write_date_expected_prev[12];
	end
	if (
		( write_date_expected_prev[13] !== 1'bx ) && ( write_date_prev[13] !== write_date_expected_prev[13] )
		&& ((write_date_expected_prev[13] !== last_write_date_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[13] = write_date_expected_prev[13];
	end
	if (
		( write_date_expected_prev[14] !== 1'bx ) && ( write_date_prev[14] !== write_date_expected_prev[14] )
		&& ((write_date_expected_prev[14] !== last_write_date_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[14] = write_date_expected_prev[14];
	end
	if (
		( write_date_expected_prev[15] !== 1'bx ) && ( write_date_prev[15] !== write_date_expected_prev[15] )
		&& ((write_date_expected_prev[15] !== last_write_date_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[15] = write_date_expected_prev[15];
	end
	if (
		( write_date_expected_prev[16] !== 1'bx ) && ( write_date_prev[16] !== write_date_expected_prev[16] )
		&& ((write_date_expected_prev[16] !== last_write_date_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[16] = write_date_expected_prev[16];
	end
	if (
		( write_date_expected_prev[17] !== 1'bx ) && ( write_date_prev[17] !== write_date_expected_prev[17] )
		&& ((write_date_expected_prev[17] !== last_write_date_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[17] = write_date_expected_prev[17];
	end
	if (
		( write_date_expected_prev[18] !== 1'bx ) && ( write_date_prev[18] !== write_date_expected_prev[18] )
		&& ((write_date_expected_prev[18] !== last_write_date_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[18] = write_date_expected_prev[18];
	end
	if (
		( write_date_expected_prev[19] !== 1'bx ) && ( write_date_prev[19] !== write_date_expected_prev[19] )
		&& ((write_date_expected_prev[19] !== last_write_date_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[19] = write_date_expected_prev[19];
	end
	if (
		( write_date_expected_prev[20] !== 1'bx ) && ( write_date_prev[20] !== write_date_expected_prev[20] )
		&& ((write_date_expected_prev[20] !== last_write_date_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[20] = write_date_expected_prev[20];
	end
	if (
		( write_date_expected_prev[21] !== 1'bx ) && ( write_date_prev[21] !== write_date_expected_prev[21] )
		&& ((write_date_expected_prev[21] !== last_write_date_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[21] = write_date_expected_prev[21];
	end
	if (
		( write_date_expected_prev[22] !== 1'bx ) && ( write_date_prev[22] !== write_date_expected_prev[22] )
		&& ((write_date_expected_prev[22] !== last_write_date_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[22] = write_date_expected_prev[22];
	end
	if (
		( write_date_expected_prev[23] !== 1'bx ) && ( write_date_prev[23] !== write_date_expected_prev[23] )
		&& ((write_date_expected_prev[23] !== last_write_date_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[23] = write_date_expected_prev[23];
	end
	if (
		( write_date_expected_prev[24] !== 1'bx ) && ( write_date_prev[24] !== write_date_expected_prev[24] )
		&& ((write_date_expected_prev[24] !== last_write_date_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[24] = write_date_expected_prev[24];
	end
	if (
		( write_date_expected_prev[25] !== 1'bx ) && ( write_date_prev[25] !== write_date_expected_prev[25] )
		&& ((write_date_expected_prev[25] !== last_write_date_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[25] = write_date_expected_prev[25];
	end
	if (
		( write_date_expected_prev[26] !== 1'bx ) && ( write_date_prev[26] !== write_date_expected_prev[26] )
		&& ((write_date_expected_prev[26] !== last_write_date_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[26] = write_date_expected_prev[26];
	end
	if (
		( write_date_expected_prev[27] !== 1'bx ) && ( write_date_prev[27] !== write_date_expected_prev[27] )
		&& ((write_date_expected_prev[27] !== last_write_date_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[27] = write_date_expected_prev[27];
	end
	if (
		( write_date_expected_prev[28] !== 1'bx ) && ( write_date_prev[28] !== write_date_expected_prev[28] )
		&& ((write_date_expected_prev[28] !== last_write_date_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[28] = write_date_expected_prev[28];
	end
	if (
		( write_date_expected_prev[29] !== 1'bx ) && ( write_date_prev[29] !== write_date_expected_prev[29] )
		&& ((write_date_expected_prev[29] !== last_write_date_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[29] = write_date_expected_prev[29];
	end
	if (
		( write_date_expected_prev[30] !== 1'bx ) && ( write_date_prev[30] !== write_date_expected_prev[30] )
		&& ((write_date_expected_prev[30] !== last_write_date_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[30] = write_date_expected_prev[30];
	end
	if (
		( write_date_expected_prev[31] !== 1'bx ) && ( write_date_prev[31] !== write_date_expected_prev[31] )
		&& ((write_date_expected_prev[31] !== last_write_date_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_date[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_date_expected_prev);
		$display ("     Real value = %b", write_date_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_date_exp[31] = write_date_expected_prev[31];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg RESET;
// wires                                               
wire [31:0] ALU_1_IN;
wire [31:0] ALU_2_IN;
wire [31:0] ALU_INSTANT_OUT;
wire [3:0] ALU_OPCODE;
wire do_update;
wire eq;
wire inst_cache_en;
wire [19:0] instr;
wire is_shamt_load;
wire overflow;
wire [31:0] pc;
wire [31:0] ReadDataOne;
wire [31:0] ReadDataTwo;
wire reg_write;
wire sgn;
wire [31:0] write_date;
wire zero;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.ALU_1_IN(ALU_1_IN),
	.ALU_2_IN(ALU_2_IN),
	.ALU_INSTANT_OUT(ALU_INSTANT_OUT),
	.ALU_OPCODE(ALU_OPCODE),
	.CLOCK(CLOCK),
	.do_update(do_update),
	.eq(eq),
	.inst_cache_en(inst_cache_en),
	.instr(instr),
	.is_shamt_load(is_shamt_load),
	.overflow(overflow),
	.pc(pc),
	.ReadDataOne(ReadDataOne),
	.ReadDataTwo(ReadDataTwo),
	.reg_write(reg_write),
	.RESET(RESET),
	.sgn(sgn),
	.write_date(write_date),
	.zero(zero)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #30000 1'b0;
end 

CPU_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.RESET(RESET),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.ALU_1_IN(ALU_1_IN),
	.ALU_2_IN(ALU_2_IN),
	.ALU_INSTANT_OUT(ALU_INSTANT_OUT),
	.ALU_OPCODE(ALU_OPCODE),
	.do_update(do_update),
	.eq(eq),
	.inst_cache_en(inst_cache_en),
	.instr(instr),
	.is_shamt_load(is_shamt_load),
	.overflow(overflow),
	.pc(pc),
	.ReadDataOne(ReadDataOne),
	.ReadDataTwo(ReadDataTwo),
	.reg_write(reg_write),
	.sgn(sgn),
	.write_date(write_date),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

