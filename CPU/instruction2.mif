DEPTH = 256;                   -- The size of memory in words
WIDTH = 20;                    -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = BIN;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
00 : 10000000000000100001; -- load shamt r1 <-1
01 : 10000000000000100010; -- load shamt r2 <-1
02 : 10000000000001000011; -- load shamt r3 <-10
03 : 10000000000010000100; -- load shamt r4 <-100
04 : 00110000011111000001; -- r1 = r1 << 30
05 : 00000000000000100001; -- r1 = r0 + r1 (0)
06 : 00000000000001000010; -- r2 = r0 + r2 (0)
07 : 00000000000001100011; -- r3 = r0 + r3 (0)
08 : 00000000000010000100; -- r4 = r0 + r4 (0)
09 : 00000000100001000101; -- r5 = r2 + r2 -> must overflow
0A : 00000000010000100110; -- r6 = r1 + r1
0B : 00100001000000100100; -- r4 = r4 >> 1
0C : 01010001000010000111; -- r7 = r4 ~& r4
0D : 01110000000010001000; -- r8 = set on less than (r0 , r4)
0E : 01100000100010001001; -- r9 = min(r2 , r4)
0F : 10000000000000101010; -- load shamt r10 <-1
10 : 00001000000101001011; -- r11 = r0 - r10 (answer must be -1)
11 : 00000000000000100001; -- r1 = r0 + r1 (0)
12 : 00000000000001000010; -- r2 = r0 + r2 (0)
13 : 00000000000001100011; -- r3 = r0 + r3 (0)
14 : 00000000000001000010; -- r4 = r0 + r4 (0)
15 : 00000000000010100101; -- r5 = r0 + r5 (0)
16 : 00000000000011000110; -- r6 = r0 + r6 (0)
17 : 00000000000011100111; -- r7 = r0 + r7 (0)
18 : 00000000000100001000; -- r8 = r0 + r8 (0)
19 : 00000000000100101001; -- r9 = r0 + r9 (0)
1A : 00001000000101001010; -- r10 = r0 + r10 + cin(1)
1B : 00000000000101101011; -- r11 = r0 + r11
END;
